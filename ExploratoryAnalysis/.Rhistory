#   setkeyv(sick_df,col_names)
#   alarm()
#
#   #loading data from healthy Twitter users
#   setwd("C:/Users/DrosoNeuro/Dropbox/UZH_Master/Masterarbeit/TwitterData/tweets_from_todd/csv_files/one_hundred_csv") # temporarily set WD to folder with files from healthy Twitter users
#   temp = list.files(pattern="*.csv") #read names of all .csv files
#
#   #creates names from csv-files in folder;
#   names <- setNames(temp, make.names(gsub("*.csv$", "", temp))) #gsub uses regex to replace the specified patterns within a name
#
#   #loading df into environment
#   list2env(lapply(names,fread, header=FALSE), envir = .GlobalEnv)
#
#   #create a list of all the datatables
#   healthy_list <- lapply(attr(names,"names"),get)
#
#   #combine into a single datatable
#   healthy_df <- do.call("rbind",healthy_list)
#
#   remove(list = attr(names,"names"))#removing single df to save RAM
#   remove(healthy_list)#removing sick_list to save RAM
#   remove(list= c("names","temp"))
#
#   colnames(healthy_df) <- col_names
#   setkeyv(healthy_df, col_names) #sets key to column "userID"
#   remove(col_names)
#   alarm()
#
#   setwd(root_path) # set WD back
#
#   save.image(file="Twitter_datatables.RData") #saving loaded datatable to prevent loading it from the excel-files the next time
#   #fwrite(healthy_df,"healthy_df.csv") #fwrite needs developmental package of "data.table" for now (as of 2016.09.16)
#   #fwrite(sick_df,"sick_df.csv") #doesn't work yet!!! and isn't faster than simple export of data with feather!
#   #write_feather(sick_df, "sick_df.feather") #faster than save.image, bute uses more disk space (but shouldn't be used for long-term storage)
#   #write_feather(healthy_df,"healthy_df.feather") #faster than save.image, but uses more disk space
# EXPLORATORY DATA ANALYSIS ------
#if the code above has been executed once, you can uncomment it and start directly from here
setwd(root_path) # set WD back
load(file="Twitter_datatables.RData") #use if you decided to export the whole working space
# sick_df <- read_feather("sick_df.feather") #potential alternative for exporting working space. is considerably faster, but would need some additional tweaking
# sick_df <- sick_df[,userID:=as.integer64(userID)] #transform to integer64 for readability
# healthy_df <- read_feather("healthy_df.feather")})
# healthy_df <- healthy_df[,userID:=as.integer64(userID)] #transform to integer64 for readability
title_plot<-"All tweets from " #generic title plot used in some functions
# to_analyse <- "healthy_df"
# rm(list=setdiff(ls(), to_analyse)) #removes all entries from workspace except for the datatable that shall be analysed
#
#funtion to make selection of datatable based on coordinate (lon_west,lon_est,lat_south,lat_north)
coord_selection  <- function(datatable,coord_selec)
{
selec <- datatable[datatable[,longitude >=coord_selec[1] & longitude <= coord_selec[2] & latitude >= coord_selec[3] & latitude <=coord_selec[4]],]
#selec <- datatable[which(datatable[,"longitude",]>=coord_selec[1] & datatable[,"longitude"] <= coord_selec[2] & datatable[,"latitude"] >= coord_selec[3] & datatable[,"latitude"] <= coord_selec[4]),] #old way to do it with dataframes
}
#function to make selection of datatable based on coordinate (lon_west,lon_est,lat_south,lat_north); also returns index
coord_selection2  <- function(datatable,coord_selec) #
{
selec <- datatable[datatable[,longitude >=coord_selec[1] & longitude <= coord_selec[2] & latitude >= coord_selec[3] & latitude <=coord_selec[4]],]
index <-datatable[,longitude >=coord_selec[1] & longitude <= coord_selec[2] & latitude >= coord_selec[3] & latitude <=coord_selec[4]]
return(list(selec,index))
}
coord_USA <- c(-125,-66,25,50) #select only tweets from mainland USA
sick_df <- coord_selection(sick_df, coord_USA)
healthy_df <- coord_selection(healthy_df,coord_USA)
explore_data <- function(datatable,sickness_state){ #"sickness_state" takes values "sick" or "healthy" and signifies the state that the users represented in the dataste *should* be in
all_users<-unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique return of user_ID
num_users <- length(all_users)
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<-sum(datatable[,sick]==1) #returns number of tweets that are labelled as "sick"
#sick_tweets<-datatable[sick_position,5] #returns entries that are labelled as sick
# NB! n sick tweets != n sick users!!!
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- length(sick_users)
#getting healthy
healthy_position <- which(datatable[,sick]==0)
#healthy_tweets <- unique(datatable[healthy_position,5]) #returns entries that are labelled as healthy
num_healthy_tweets <- sum(datatable[,sick]==0)
healthy_users <- unique(datatable[healthy_position,userID]) #getting healthy users
num_healthy_users <- length(healthy_users)
#check the total number of false labels
if (sickness_state == "sick"){ #checking whether there are any users in a "sick" datatable that have never been sick, i.e. that healthy_users that don't show up in sick_users
false_label <- healthy_users[!(healthy_users %in% sick_users)]
num_false_label <- length(false_label)
}
else if (sickness_state == "healthy"){
false_label <- sick_users
num_false_label <- num_sick_users
}
out <- list(all_users,num_users,sick_position,num_sick_tweets,sick_users,num_sick_users,healthy_position,num_healthy_tweets,healthy_users,num_healthy_users,false_label,num_false_label)
names(out) <- c("all_users","num_users", "sick_position","num_sick_tweets","sick_users","num_sick_users","healthy_position", "num_healthy_tweets", "healthy_users","num_healthy_users","false_label","num_false_label")
return(out)
}
#get preliminary info from datatables
explore_sick <- explore_data(sick_df,"sick")
str(explore_sick)
explore_sick <- list(explore_sick$false_label) #prune list to save memory
names(explore_sick) <- "false_label"
explore_healthy <- explore_data(healthy_df,"healthy")
str(explore_healthy)
explore_healthy <- list(explore_healthy$false_label) #reduce size of list to save memory
names(explore_healthy) <- "false_label"
to_import <- read_feather("temporary/to_import.feather") #imports processed dataset with timezones back into R
to_import <- data.table(to_import)
to_import
datatable[,timezone:=to_import]
datatable <- sick_df
setkey(datatable,"userID")
datatable <- datatable[time!=0,] #removing all entries which don't have a system time
datatable[,timezone:=to_import]
zones <- datatable[,.N,by=.(timezone)] #get table of timezones to see how many different timezones there are
zones
to_import
to_import[,.N,by=0]
to_import[,.N,by=.(0)]
datatable[is.na(timezone)]
datatable[which(is.na(timezone))]
which(datatable[is.na(timezone)])
is.na(datatable[timezone])
is.na(datatable[,timezone])
test <- datatable
head(pos_na)
pos_na <- is.na(datatable[,timezone]) #getting position of NA
head(pos_an)
head(pos_a)
head(pos_na)
test(pos_na)
test[pos_na]
test[pos_na,timezone:="hello"]
test
test[pos_na,timezone:=NA]
help(ifelse)
help(lapply)
user322 <- datatable[userID==322]
user322
pos_na322 <- is.na(user322[,timezone])
ifelse(timezone>=-84,"America/New_York",timezone))]
user322 <- user322[pos_na322,timezone:=ifelse(timezone<=-117,"America/Los_Angeles",
ifelse(timezone>=-84,"America/New_York",timezone))]
user322
user322
user322 <- user322[pos_na322,timezone:=ifelse(longitude<=-117,"America/Los_Angeles",
ifelse(longitude>=-84,"America/New_York",timezone))]
user322
user322
datatable[,timezone:=to_import] #add timezones to datatable
zones <- datatable[,.N,by=.(timezone)] #get table of timezones to see how many different timezones there are
pos_NA <- is.na(datatable[,timezone]) #position of NAs in timezone column
datatable <- datatable[pos_NA,timezone:=ifelse(longitude<=-117,"America/Los_Angeles",
ifelse(longitude>=-84,"America/New_York",timezone))]
zones2 <- datatable[,.N,by=.(timezone)] #get table of timezones to see how many different timezones there are
zones
zones2
zones2
datatable <- datatable[!is.na(timezone),]
datatable
datatable
datatable[,time1:=as.POSIXct(datatable[,time],origin="1970-01-01",tz="UTC")] #transforming time from system time to calendar time UTC
datatable[,time2:=as.POSIXct(datatable[,time],origin="1970-01-01",tz=datatable[,timezone])]
datatable
datatable[,timezone]
datatable[,time2:=as.POSIXct(datatable[,time],origin="1970-01-01",tz=datatable[,timezone])]
datatable
datatable
datatable[,time1:=as.POSIXct(datatable[,time],origin="1970-01-01",tz="UTC")] #transforming time from system time to calendar time UTC
datatable
datatabe <- sick-df
datatabe <- sick_df
setkey(datatable,"userID")
datatable <- datatable[time!=0,] #removing all entries which don't have a system time
to_import <- read_feather("temporary/to_import.feather") #imports processed dataset with timezones back into R
to_import <- data.table(to_import)
datatable[,timezone:=to_import] #add timezones to datatable
datatable <- sick_df
setkey(datatable,"userID")
datatable <- datatable[time!=0,] #removing all entries which don't have a system time
datatable[,timezone:=to_import] #add timezones to datatable
zones_before <- datatable[,.N,by=.(timezone)]
#position of NAs in timezone column
pos_NA <- is.na(datatable[,timezone])
#rough assignment of timezones based on longitude for those entries that came back as NA;
#if tweet was sent from position west of San Diego, we assign the time zone for LA;
#if tweet was sent from position east of Talahassee, we assign the time zone for NY;
#San Diego 32.8242404,-117.3753518
#Talahassee 30.4670648,-84.3969416
datatable <- datatable[pos_NA,timezone:=ifelse(longitude<=-117,"America/Los_Angeles",
ifelse(longitude>=-84,"America/New_York",timezone))]
#get table of timezones to see how many NAs are left (usually, the above fix gets rid of over 90% of NA)
zones_after <- datatable[,.N,by=.(timezone)]
#removing all remaining NAs
datatable <- datatable[!is.na(timezone),]
datatable[,time1:=as.POSIXct(datatable[,time],origin="1970-01-01",tz="UTC")] #transforming time from system time to calendar time UTC
datatable
datatable[,time2:=as.POSIXct(datatable[,time],origin="1970-01-01",tz="America/Los_Angeles"])]
datatable[,time2:=as.POSIXct(datatable[,time],origin="1970-01-01",tz="America/Los_Angeles")]
datatable
datatable[,time2:=as.POSIXct(datatable[,time],origin="1970-01-01",tz=rep("America/Los_Angeles",4049302)]
datatable[,time2:=as.POSIXct(datatable[,time],origin="1970-01-01",tz=rep("America/Los_Angeles",4049302))]
datataböle
datatable
help("as.POSIXlt")
time_zones <- datatable[,timezone]
time_zones
help(lapply)
lapply(datatable[,time],as.POSIXct,origin="1970-01-01",tz=datatable[,timezone])
a <- lapply(datatable[,time],as.POSIXct,origin="1970-01-01",tz=datatable[,timezone])
a <- lapply(user322[,time],as.POSIXct,origin="1970-01-01",tz=user322[,timezone])
a
datatable <- sick_df
setkey(datatable,"userID")
datatable <- datatable[time!=0,] #removing all entries which don't have a system time
datatable[,timezone:=to_import] #add timezones to datatable
pos_NA <- is.na(datatable[,timezone])
datatable <- datatable[pos_NA,timezone:=ifelse(longitude<=-117,"America/Los_Angeles",
ifelse(longitude>=-84,"America/New_York",timezone))]
datatable <- datatable[!is.na(timezone),]
user322 <- datatable[userID==322,]
a <- lapply(user322[,time],as.POSIXct,origin="1970-01-01",tz=user322[,timezone])
a
head(d)
head(a)
user322 <- datatable[userID==322,]
user322
a <- lapply(tz=datatable[,timezone],as.POSIXct,origin="1970-01-01",x=datatable[,time])
help(lapply)
a <- lapply(X=datatable[,timezone],as.POSIXct,origin="1970-01-01",x=datatable[,time])
user322 <- datatable[userID==322,]
b <- lapply(X=user322[,timezone],as.POSIXct,origin="1970-01-01",x=user322[,time])
b
head(b)
str(b)
user322[,timezone]
date_converter <- function(time_zone,times){
as.POSIXct(times,origin="1970-01-01",tz=time_zone)
}
b <- lapply(user322[,timezone],date_converter,user322[,time])
b
user322[,time]
date_converter <- function(time_zone,time){
as.POSIXct(time,origin="1970-01-01",tz=time_zone)
}
b <- lapply(user322[,timezone],date_converter,user322[,time])
b
help(lapply)
str(user322[,timezone])
b <- lapply(user322,as.POSIXct,origin="1970-01-01")
b <- lapply(user322[,time],as.POSIXct,origin="1970-01-01")
b
b <- sapply(user322[,time],as.POSIXct,origin="1970-01-01")
b
user322[,time]
b <- sapply(user322[,time],as.POSIXct,origin="1970-01-01")
b
b <- sapply(X=user322[,timezone],as.POSIXct,origin="1970-01-01",x=user322[,time])
b
b <- sapply(user322[,time],as.POSIXct,origin="1970-01-01")
b
b <- lapply(user322[,time],as.POSIXct,origin="1970-01-01",simplify= T)
b
b <- lapply(user322[,time],as.POSIXct,origin="1970-01-01",simplify2array)
b
b <- lapply(user322[,time],as.POSIXct,origin="1970-01-01")
b
as.POSIXct(user322[1,time])
as.POSIXct(user322[1,time],origin="1970-01-01")
as.POSIXct(user322[1:2,time],origin="1970-01-01")
as.POSIXct(user322[1:5,time],origin="1970-01-01")
a <- lapply(datatable[,timezone],as.POSIXct,origin="1970-01-01",x=datatable[,time])
b <- lapply(user322[,timezone],as.POSIXct,origin="1970-01-01",x=user322[,time])
b
help("as.POSIXlt.POSIXct")
b <- lapply(user322[,timezone],as.POSIXlt,origin="1970-01-01",x=user322[,time])
b
as.POSIXlt(user322[,time],origin="1970-01-01",x=user322[,timezone])
as.POSIXlt(user322[,time],origin="1970-01-01",tz=user322[,timezone])
as.POSIXct(user322[,time],origin="1970-01-01",tz=user322[,timezone])
user322
as.POSIXct(user322[,time],origin="1970-01-01",tz=user322[,timezone])
time2 <- user322[,time]
time2[1]
time2 <- user322[,time]
for (x in length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[,time],origin="1970-01-01",user322[,timezone])
}
time2 <- user322[,time]
for (x in length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
as.POSIXct(user322[1,time],origin="1970-01-01",user322[1,timezone])
str(time2)
time2[1] <- as.POSIXct(user322[1,time],origin="1970-01-01",user322[1,timezone])
time2
time2[1] <- "hello"
time2
time2 <- user322[,time]
time2 <- as.POSIXct(user322[,time],origin="1970-01-01")
for (x in length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
time2 <- as.POSIXct(user322[,time],origin="1970-01-01")
time2
time2 <- as.POSIXct(user322[,time],origin="1970-01-01")
time2
rm(time2)
time2 <- as.POSIXct(user322[,time],origin="1970-01-01")
time2
time2 <- as.POSIXct(user322[,time],origin="1970-01-01",tz="")
time2
time2 <- as.POSIXct(user322[,time],origin="1970-01-01",tz="UTC")
time2
for (x in length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
time2 <- array(0,dim=length(user322[,timezone]))
time2
for (x in length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
for (x in length(user322[,timezone]))
{
print(x)
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
for (x in 1:length(user322[,timezone]))
{
print(x)
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
str(time2)
for (x in 1:length(user322[,timezone]))
{
as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
help(list)
time2 <- list()
time2 <- list()
for (x in 1:length(user322[,timezone]))
{
time2[[x]] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
time2 <- list()
for (x in 1:length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",user322[x,timezone])
}
time2
as.array(time2)
data.table(time2)
str(time2)
time2 <- list()
for (x in 1:length(user322[,timezone]))
{
time2[x] <- as.POSIXct(user322[x,time],origin="1970-01-01",tz=user322[x,timezone])
}
time2
for (x in 1:length(user322[,timezone]))
{
time2[x] <- as.POSIXlt(user322[x,time],origin="1970-01-01",tz=user322[x,timezone])
}
warnings()
time2
date_converter <- function(time_zone,time){
print(as.POSIXct(time,origin="1970-01-01",tz=time_zone))
}
for (x in 1:length(user322[,timezone]))
{
print(as.POSIXct(user322[x,time],origin="1970-01-01",tz=user322[x,timezone]))
}
help("as.POSIXct.default")
user322
datatable[,time1:=as.POSIXct(datatable[,time],origin="1970-01-01",tz="UTC")] #transforming time from system time to calendar time UTC
user322 <- datatable[userID==322,]
user322
user322[,time2:=time1]
user322
for (x in 1:length(user322[,timezone]))
{
user322[x,time2] <- as.POSIXct(user322[x,time],origin="1970-01-01",tz=user322[x,timezone])
}
user322
user322[1,time2]
user322[1,time2] <- "2015-09-24 17:06:35 UTC"
user322[,time2:=time1]
for (x in 1:length(user322[,timezone]))
{
user322[x,time2:=as.POSIXct(user322[x,time],origin="1970-01-01",tz=user322[x,timezone])]
}
user322
user322
user322[,time2]
for (x in 1:length(user322[,timezone]))
{
user322[x,time3:=as.POSIXct(user322[x,time],origin="1970-01-01",tz=user322[x,timezone])]
}
user322[,time3:=]
user322[,time3:=NA]
user322
for (x in 1:length(user322[,timezone]))
{
user322[x,time3:=as.POSIXct(user322[x,time],origin="1970-01-01",tz=user322[x,timezone])]
}
user322
user322
user322[,time3]
datatable[,time2:=NA]
for (x in 1:length(datatable[,timezone]))
{
datatable[x,time2:=as.POSIXct(datatable[x,time],origin="1970-01-01",tz=datatable[x,timezone])]
}
warnings()
b <- lapply(user322[,timezone],date_converter,user322[,time])
b <- lapply(user322[,time],as.POSIXct,origin="1970-01-01",tz=user322[,timezone])
b
b <- lapply(user322[,timezone],as.POSIXct,origin="1970-01-01",x=user322[,time])
b
help(apply)
b <- apply(user322[,timezone],2,as.POSIXct,origin="1970-01-01",x=user322[,time])
b <- apply(user322[,timezone],1,as.POSIXct,origin="1970-01-01",x=user322[,time])
dim(user322[,timezone])
length(user322[,timezone])
help(dim)
str(user322[,timezone])
date_converter <- function(time_and_zone){
as.POSIXct(time_and_zone[1],origin="1970-01-01",tz=time_and_zone[2])
}
date_converter(c(user322[1,time],user322[1,timezone]))
c(user322[1,time],user322[1,timezone])
help(as.numeric)
date_converter <- function(time_and_zone){
as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2])
}
date_converter(c(user322[1,time],user322[1,timezone]))
c(user322[,time],user322[,time_zone])
c(user322[,time],user322[,timezone])
matrix(c(user322[,time],user322[,timezone]),1,2)
matrix(c(user322[,time],user322[,timezone]),2,1)
matrix(c(user322[,time],user322[,timezone]),length(user322[,time]),2)
test <- matrix(c(user322[,time],user322[,timezone]),length(user322[,time]),2)
dim(test)
test_result <- apply(test,1,date_converter)
test_result
date_converter <- function(time_and_zone){
as.character(as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2]))
}
test <- matrix(c(user322[,time],user322[,timezone]),length(user322[,time]),2)
test_result <- apply(test,1,date_converter)
test_result
date_converter(c(user322[1,time],user322[1,timezone]))
date_converter1(c(user322[1,time],user322[1,timezone]))
date_converter1 <- function(time_and_zone){
as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2])
}
date_converter2 <- function(time_and_zone){
as.character(as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2]))
}
date_converter2(c(user322[1,time],user322[1,timezone]))
date_converter1(c(user322[1,time],user322[1,timezone]))
date_converter2 <- function(time_and_zone){
format(as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2]))
}
date_converter1(c(user322[1,time],user322[1,timezone]))
date_converter2(c(user322[1,time],user322[1,timezone]))
date_converter2 <- function(time_and_zone){
format(as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2]),tz=time_and_zone[2])
}
date_converter2(c(user322[1,time],user322[1,timezone]))
date_converter3 <- function(time_and_zone){
format(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2])
}
date_converter3(c(user322[1,time],user322[1,timezone]))
date_converter3 <- function(time_and_zone){
format(as.numeric(time_and_zone[1]),format="%Y-%m-%d %H:%M:%S %Z",origin="1970-01-01",tz=time_and_zone[2])
}
date_converter3(c(user322[1,time],user322[1,timezone]))
format(user322[,time],format="%Y-%m-%d %H:%M:%S %Z",origin="1970-01-01", tz=user322[,timezone])
format(user322[,time],format="%Y-%m-%d %H:%M:%S",origin="1970-01-01", tz=user322[,timezone])
as.character(format(user322[,time],format="%Y-%m-%d %H:%M:%S",origin="1970-01-01", tz=user322[,timezone]))
help(as.character)
date_converter2 <- function(time_and_zone){
as.character(as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2])format="%Y-%m-%d %H:%M:%S %Z")
}
date_converter2 <- function(time_and_zone){
as.character(as.POSIXct(as.numeric(time_and_zone[1]),origin="1970-01-01",tz=time_and_zone[2]),format="%Y-%m-%d %H:%M:%S %Z")
}
date_converter2(c(user322[1,time],user322[1,timezone]))
date_converter3(c(user322[1,time],user322[1,timezone]))
date_converter3 <- function(time_and_zone){
as.character(as.numeric(time_and_zone[1]),format="%Y-%m-%d %H:%M:%S %Z",origin="1970-01-01",tz=time_and_zone[2])
}
date_converter3(c(user322[1,time],user322[1,timezone]))
date_converter3 <- function(time_and_zone){
format(as.numeric(time_and_zone[1]),format="%Y-%m-%d %H:%M:%S %Z",origin="1970-01-01",tz=time_and_zone[2])
}
test <- matrix(c(user322[,time],user322[,timezone]),length(user322[,time]),2)
test_result <- apply(test,1,date_converter2)
test_result
test2 <- matrix(c(datatable[,time],datatable[,timezone]),length(datatable[,time]),2)
test2
test_result2 <- apply(test2,1,date_converter2)
test2 <- data.table(matrix(c(datatable[,time],datatable[,timezone]),
length(datatable[,time]),2))
dim(test2)
test_result2 <- apply(test2,1,date_converter2)
