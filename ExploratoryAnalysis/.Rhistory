names(dimnames(dis_table))<-c("","")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
dis_table
mosaic(dis_table , pop=F)
names(dimnames(dis_table))<-c("a","b")
mosaic(dis_table , pop=F)
names(dimnames(dis_table))<-c(" "," ")
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
dis_table
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
dis_table
labs <- round(prop.table(dis_table),2)
labs
mosaic(dis_table , pop=F)
labeling_cells(text = labs, margin=0)(dis_table)
mosaic(dis_table , pop=F)
labeling_cells(text = labs, margin=0)(dis_table)
labs
names(labs)
names(dis_table)
names(dimnames(dis_table))<-c(" "," ")
names(dis_tables)
names(dis_table)
names(dimnames(dis_table))<-c(" s","b ")
names(dis_table)
dis_table
mosaic(dis_table , pop=F)
labeling_cells(text = labs, margin=0)(dis_table)
mosaic(dis_table , pop=F)
labeling_cells(text = labs, margin=0)(dis_table)
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c(" "," ")
labeling_cells(text = dis_table, margin=0)(dis_table)
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A",B ")
names(dimnames(dis_table))<-c("A","B ")
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B ")
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B ")
mosaic(dis_table , pop=F)
dimnames(dis_table)
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B ")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
names(dimnames(dis_table))<-c(""," ")
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c(""," ")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c(" "," ")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
mosaic(dis_table , pop=F,labels=F)
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = dis_table, margin=0)(dis_table)
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
format(dis_table,scientific=T)
help(options)
1000000
100000
10000
options(scipen=-2)
100
1000
options(scipen=-3)
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
dis_table
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
options(scipen=-3)
mosaic(dis_table , pop=F,varnames=F)
dis_table
dis_table[1,1]
options(scipen=-4)
dis_table[1,1]
dis_table[1,2]
1000
options(scipen=0)
dis_table
as.numeric(dis_table)
c(1000,100000,1000000)
options(scipen=-3)
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_users <- length(all_users)
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<-sum(datatable[,sick]==1) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- length(sick_users)
#getting healthy tweets and healthy users
healthy_position <- which(datatable[,sick]==0)
num_healthy_tweets <- sum(datatable[,sick]==0)
healthy_users <- unique(datatable[healthy_position,userID])
num_healthy_users <- length(healthy_users)
#users who have either *never* tweeted a tweet labelled as healthy or *only* tweeted tweets labelled as healthy or done both
sick_ind <- !(sick_users %in% healthy_users)
only_sick <- sick_users[sick_ind]
num_only_sick_users <- sum(sick_ind)
only_sick_position <- which(datatable[,userID] %in% only_sick)
healthy_ind <- !(healthy_users %in% sick_users)
only_healthy <- healthy_users[healthy_ind]
num_only_healthy_users <- sum(healthy_ind)
only_healthy_position <- which(datatable[,userID] %in% only_healthy)
both_ind <- (healthy_users %in% sick_users)
both <- healthy_users[both_ind]
num_both <- sum(both_ind)
both_position <- which(datatable[,userID] %in% both)
#disease table with number of sick/healthy users
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B")
dis_table
a <- c(1000,10000,100000,1000000)
a
a <- as.table(a)
a
num_users
num_users
format(numer_users,scientific=T)
format(num_users,scientific=T)
format(10000000,scientific=T)
str(num_users)
a <- 1000000
str(a)
num_sick_tweets
str(num_sick_tweets)
str(num_users)
num_users <- as.numeric(length(all_users))
str(num_users)
options(scipen=-3)
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_users <- as.numeric(length(all_users))
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<- as.num(sum(datatable[,sick]==1)) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- as.num(length(sick_users))
#getting healthy tweets and healthy users
10
100
options(scipen=-4) #transforms numbers into scientific format as soon as they are longer than 5-4=1
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_users <- as.numeric(length(all_users))
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<- as.numeric(sum(datatable[,sick]==1)) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- as.numeric(length(sick_users))
#getting healthy tweets and healthy users
healthy_position <- which(datatable[,sick]==0)
num_healthy_tweets <- as.numeric(sum(datatable[,sick]==0))
healthy_users <- unique(datatable[healthy_position,userID])
num_healthy_users <- as.numeric(length(healthy_users))
#users who have either *never* tweeted a tweet labelled as healthy or *only* tweeted tweets labelled as healthy or done both
sick_ind <- !(sick_users %in% healthy_users)
only_sick <- sick_users[sick_ind]
num_only_sick_users <- as.numeric(sum(sick_ind))
only_sick_position <- which(datatable[,userID] %in% only_sick)
healthy_ind <- !(healthy_users %in% sick_users)
only_healthy <- as.numeric(healthy_users[healthy_ind])
num_only_healthy_users <- sum(healthy_ind)
only_healthy_position <- which(datatable[,userID] %in% only_healthy)
both_ind <- (healthy_users %in% sick_users)
both <- healthy_users[both_ind]
num_both <- as.numeric(sum(both_ind))
both_position <- which(datatable[,userID] %in% both)
#disease table with number of sick/healthy users
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
help(format)
format(dis_table,trim=T)
dis_table
dis_tabl[1,1,]
dis_table[1,1]
options(scipen=-4,digits=1) #transforms numbers into scientific format as soon as they are longer than 5-4=1
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_users <- as.numeric(length(all_users))
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<- as.numeric(sum(datatable[,sick]==1)) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- as.numeric(length(sick_users))
#getting healthy tweets and healthy users
healthy_position <- which(datatable[,sick]==0)
num_healthy_tweets <- as.numeric(sum(datatable[,sick]==0))
healthy_users <- unique(datatable[healthy_position,userID])
num_healthy_users <- as.numeric(length(healthy_users))
#users who have either *never* tweeted a tweet labelled as healthy or *only* tweeted tweets labelled as healthy or done both
sick_ind <- !(sick_users %in% healthy_users)
only_sick <- sick_users[sick_ind]
num_only_sick_users <- as.numeric(sum(sick_ind))
only_sick_position <- which(datatable[,userID] %in% only_sick)
healthy_ind <- !(healthy_users %in% sick_users)
only_healthy <- as.numeric(healthy_users[healthy_ind])
num_only_healthy_users <- sum(healthy_ind)
only_healthy_position <- which(datatable[,userID] %in% only_healthy)
both_ind <- (healthy_users %in% sick_users)
both <- healthy_users[both_ind]
num_both <- as.numeric(sum(both_ind))
both_position <- which(datatable[,userID] %in% both)
#disease table with number of sick/healthy users
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
options(scipen=-4,digits=2) #transforms numbers into scientific format as soon as they are longer than 5-4=1
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_users <- as.numeric(length(all_users))
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<- as.numeric(sum(datatable[,sick]==1)) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- as.numeric(length(sick_users))
#getting healthy tweets and healthy users
healthy_position <- which(datatable[,sick]==0)
num_healthy_tweets <- as.numeric(sum(datatable[,sick]==0))
healthy_users <- unique(datatable[healthy_position,userID])
num_healthy_users <- as.numeric(length(healthy_users))
#users who have either *never* tweeted a tweet labelled as healthy or *only* tweeted tweets labelled as healthy or done both
sick_ind <- !(sick_users %in% healthy_users)
only_sick <- sick_users[sick_ind]
num_only_sick_users <- as.numeric(sum(sick_ind))
only_sick_position <- which(datatable[,userID] %in% only_sick)
healthy_ind <- !(healthy_users %in% sick_users)
only_healthy <- as.numeric(healthy_users[healthy_ind])
num_only_healthy_users <- sum(healthy_ind)
only_healthy_position <- which(datatable[,userID] %in% only_healthy)
both_ind <- (healthy_users %in% sick_users)
both <- healthy_users[both_ind]
num_both <- as.numeric(sum(both_ind))
both_position <- which(datatable[,userID] %in% both)
#disease table with number of sick/healthy users
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A","B")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
mosaic(dis_table , pop=F,varnames=F,1)
mosaic(dis_table[,1] , pop=F,varnames=F)
mosaic(dis_table , pop=F,varnames=F)
help(mosaic)
doubledecke(dis_table)
doubledecker(dis_table)
data("Titanic")
doubledecker(Titanic)
doubledecker(Titanic, depvar = "Survived")
doubledecker(Survived ~ ., data = Titanic)
doubledecker(dis_table,pop=F,varnames=F)
names(dimnames(dis_table))<-c("A"," ")
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
options(scipen=-4,digits=3) #transforms numbers into scientific format as soon as they are longer than 5-4=1
num_users <- as.numeric(length(all_users))
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<- as.numeric(sum(datatable[,sick]==1)) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- as.numeric(length(sick_users))
#getting healthy tweets and healthy users
healthy_position <- which(datatable[,sick]==0)
num_healthy_tweets <- as.numeric(sum(datatable[,sick]==0))
healthy_users <- unique(datatable[healthy_position,userID])
num_healthy_users <- as.numeric(length(healthy_users))
#users who have either *never* tweeted a tweet labelled as healthy or *only* tweeted tweets labelled as healthy or done both
sick_ind <- !(sick_users %in% healthy_users)
only_sick <- sick_users[sick_ind]
num_only_sick_users <- as.numeric(sum(sick_ind))
only_sick_position <- which(datatable[,userID] %in% only_sick)
healthy_ind <- !(healthy_users %in% sick_users)
only_healthy <- as.numeric(healthy_users[healthy_ind])
num_only_healthy_users <- sum(healthy_ind)
only_healthy_position <- which(datatable[,userID] %in% only_healthy)
both_ind <- (healthy_users %in% sick_users)
both <- healthy_users[both_ind]
num_both <- as.numeric(sum(both_ind))
both_position <- which(datatable[,userID] %in% both)
#disease table with number of sick/healthy users
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A"," ")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
mosaic(dis_table , pop=F,varnames=F)
doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
help("doubledecker")
labeling_cells(text = dis_table,scientific=, margin=0)(dis_table)
mosaic(dis_table , pop=F,varnames=F)
labeling_cells(text = dis_table,scientifi=, margin=0)(dis_table)
doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = dis_table,scientifi=, margin=0)(dis_table)
labeling_cells(text = dis_table, margin=0)(dis_table)
mosaic(dis_table , pop=F,varnames=F)
doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
a <- doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
a
plot(a)
a <- doubledecker(dis_table,pop=F,varnames=F)
a <- labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
a
plot(a)
doubledecker(a)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
prop_sick
prop_healthy
options(scipen=0,digits=3) #transforms numbers into scientific format as soon as they are longer than 5-4=1
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_users <- as.numeric(length(all_users))
#extract sick tweets and sick users
sick_position <- which(datatable[,sick]==1) #gets position of tweets labelled as asick
num_sick_tweets<- as.numeric(sum(datatable[,sick]==1)) #returns number of tweets that are labelled as "sick"
sick_users<-unique(datatable[sick_position,userID])
num_sick_users <- as.numeric(length(sick_users))
#getting healthy tweets and healthy users
healthy_position <- which(datatable[,sick]==0)
num_healthy_tweets <- as.numeric(sum(datatable[,sick]==0))
healthy_users <- unique(datatable[healthy_position,userID])
num_healthy_users <- as.numeric(length(healthy_users))
#users who have either *never* tweeted a tweet labelled as healthy or *only* tweeted tweets labelled as healthy or done both
sick_ind <- !(sick_users %in% healthy_users)
only_sick <- sick_users[sick_ind]
num_only_sick_users <- as.numeric(sum(sick_ind))
only_sick_position <- which(datatable[,userID] %in% only_sick)
healthy_ind <- !(healthy_users %in% sick_users)
only_healthy <- as.numeric(healthy_users[healthy_ind])
num_only_healthy_users <- sum(healthy_ind)
only_healthy_position <- which(datatable[,userID] %in% only_healthy)
both_ind <- (healthy_users %in% sick_users)
both <- healthy_users[both_ind]
num_both <- as.numeric(sum(both_ind))
both_position <- which(datatable[,userID] %in% both)
#disease table with number of sick/healthy users
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A"," ")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
#plotting mosaic
#mosaic(dis_table , pop=F,varnames=F)
doubledecker(dis_table,pop=F,varnames=F)
labeling_cells(text = format(dis_table,scientific=T), margin=0)(dis_table)
prop_all
prop_healthy <- num_healthy_users/num_users
prop_sick <- num_sick_users/num_users
prop_only_sick <- num_only_sick_users/num_users
prop_only_healthy <- num_only_healthy/num_users
prop_only_sick_sick <- num_only_sick/num_sick
prop_only_healthy_healthy <- num_only_healthy/num_healthy
prop_healthy
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A"," ")
prop_all <- prop.table(dis_table)
prop_sick <- matrix(prop.table(dis_table,1)[1,],1,2)
prop_healthy <- matrix(prop.table(dis_table,2)[,2],1,2)
rownames(dis_table) <- colnames(dis_table)  <-
rownames(prop_all) <- colnames(prop_all) <-
colnames(prop_sick) <- colnames(prop_healthy) <- c("sick","healthy")
prop_all
prop_healthy
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A"," ")
prop_all <- prop.table(dis_table)
prop_all <- prop_all+dis_table[1,2]*prop_all/num_all #correcting the proportions table for
options(scipen=0,digits=3) #transforms numbers into scientific format as soon as they are longer than 5-4=1
num_all_tweets <- length(datatable[,userID])
all_users<- unique(datatable[,userID]) #unique returns a vector, data frame or array like x but with duplicate elements/rows removed; in this case = unique user_IDs
num_all_users <- as.numeric(length(all_users))
dis_table <- as.table(matrix(c(num_only_sick_users,num_both,num_both,num_only_healthy_users),ncol=2,byrow=T))
names(dimnames(dis_table))<-c("A"," ")
prop_all <- prop.table(dis_table)
prop_all <- prop_all+dis_table[1,2]*prop_all/num_all #correcting the proportions table for
prop_all <- prop_all+dis_table[1,2]*prop_all/num_all_users #correcting the proportions table for
prop_all
prop_all[1,2] <- 0
prop_all
prop_all[1,2] <- NA
prop_all
sum(prop_all)
help(sum)
sum(prop_all,na.rm =F)
sum(prop_all,na.rm =T)
prop_all
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
df_summary <- data_summary(df)
df_summary$dis_table
doubledecker(df_summary$dis_table,pop=F,varnames=F)
labeling_cells(text = format(df_summary$dis_table,scientific=T), margin=0)(dis_table)
dis_table
df_summary$dis_table
remove(list=ls())
root_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/ExploratoryAnalysis/" # defining root_path containing all relevant documents
script_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/Non_R_Code/"
###load functions & databases needed for this script -------------
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
#source("datasets/load_csv.R")
#source("datasets/load_feather.R")
#if neither of the above two scripts has been excecuted, you must uncomment it in order to get dataset for further analysis
load(file="datasets/sick_tweets.RData")
# EXPLORATORY DATA ANALYSIS ------
df_label <- "sick" #or healthy, depending on dataset
#select only tweets from mainland USA
coord_USA <- c(-125,-66,25,50)
selec_coords <- coord_selection(df,coord_USA)
df <- selec_coords[[1]]
rm(selec_coords)
gc()
#explore basic characteristics of dataset
df_summary <- data_summary(df)
str(df_summary)
df_summary$dis_table
doubledecker(df_summary$dis_table,pop=F,varnames=F)
labeling_cells(text = format(df_summary$dis_table,scientific=T), margin=0)(dis_table)
labeling_cells(text = format(df_summary$dis_table,scientific=T), margin=0)(df_summary$dis_table)
