user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N**(1/10)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=0.01) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users")   # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
a <- user_ac[user_ac$N < 1.3,]
a
b <- (a$N)**10
b
table(b)
table(a$N)
length(table(a))
length(table(a$N))
range(a$N)
hist(a)
hist(a$N)
table(a$N)
length(table(a$N))
b
table(b)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N**(1/5)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=0.01) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users")   # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=0.01) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users")   # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
help("geom_density")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
c <- user_ac[N>1000,]
c
table(c$N)
c <- user_ac[N>500,]
table(c$N)
user_ac
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
c <- user_ac$N
c
c <- c*-1
range(c)
c <- c+15530
range(c)
d <- 1/c
d
hist(d)
range(d)
table(d)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=0.01) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users")   # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
dev.off()
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=bw) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users")   # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
dev.off()
dev.off()
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=bw) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users")   # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=bw) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(1,1000)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=bw) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(1,500)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(1,500)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(1,100)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
table(user_ac)
user_ac$N
user_ac
c <- user_ac[N<50m]
c <- user_ac[N<50,]
c
table(c)
c
table(c$N)
user_ac[,N:=log10(N)]
range(user_ac)
range(user_ac$N)
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
user_ac[,N:=log(N)]
range(user_ac$N)
hist(user_ac$N)
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
user_ac[,N:=log2(N)]
hist(user_ac$N)
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
user_ac[,N:=log(N)]
hist(user_ac$N)
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
user_ac[,N:=log10(N)]
user_ac
hist(user_ac$N)
0.5**10
10**5
user_ac
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
table(user_ac$N)
10**0.5
log10(3)
10**0.6
10**0.7
10**0.2
10**04
10**0.4
10**0.6
10**0.8
user_ac[,N:=log10(N)]
hist(user_ac$N,binwidth=0.1)
hist(user_ac$N)
user_ac$N
hist(user_ac$N)
user_ac$N
hist(user_ac$N)
hist(user_ac$N,binwidth=0.1)
hist(user_ac$N,breaks=40)
hist(user_ac$N,breaks=40)
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
hist(user_ac$N
)
hist(user_ac$N,breaks=15000)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(1,100)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(0,100)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + xlim(0,50)  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
user_activity(df,df_label)
help("scale_x_continuous")
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1,expand=c(0,0)) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(1,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
user_activity <- function(datatable,tag){#datatable has to be in the form of a data.table; preferentially with key already set to "userID"
setkey(datatable,"userID")
user_ac <- datatable[,.N,by=.(userID)] #".N" is a shortcut for length(current_object), in this case, it outputs the nunber of occurences of each user in the column userID; .() is a shorthand for "list"
#user_ac[,N:=log10(N)]
user_ac[,N:=N-1]
#user_ac[,N:=N**(1/15)]
#Freedman-Diaconis rule to calculate optimal bin-width http://stats.stackexchange.com/questions/798/calculating-optimal-number-of-bins-in-a-histogram
bw <- 2*IQR(user_ac$N)/(length(user_ac$N)**(1/3))
brx <- pretty(range(user_ac$N), n = nclass.Sturges(user_ac$N),min.n = 1) #http://stackoverflow.com/questions/25146544/r-emulate-the-default-behavior-of-hist-with-ggplot2-for-bin-width
filenames <- paste0("plots/","user_activity_",tag,".pdf")
pdf(file=filenames,width=20)
#create histogram & density plot using raw counts
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
dev.off()
}
# user_activity(sick_df,"sick_df")
# user_activity(healthy_df,"healthy_df")
user_activity(df,df_label)
ctivity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
tag <- df_label
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,N]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
rep(seq(1:10),seq(10:1))
seq(10:1)
seq(1:10)
seq(10:1)
help(seq)
rev(seq(1:10))
seq(-10:1)
seq(-10)
seq(-10:10)
seq(from=-10,to=10)
seq(from=10,to=1)
a <- rep(seq(1:10),seq(10:1))
hist(a)
a
a <- rep(seq(1:10),seq(from=10,to=1))
hist(a)
a <- datatable(c(a,a))
a <- data.table(c(a,a))
a
a <- data.table(a,a)
a
a <- data.table(cbind(a,a))
a
a
a
a <- rep(seq(1:10),seq(from=10,to=1))
a <- data.table(cbind(a,a))
a
user_ac <- a
a
colnames(a) <- c("a","b")
colnames(a) <- c("a","b")
a
user_ac <- a
activity_plot <- ggplot(data =  user_ac, aes(x = user_ac[,b]))+
geom_histogram(aes(y=..density..), colour="black",fill="white",binwidth=1) + geom_density(alpha=.2, fill="#FF6666") +ggtitle(paste0('user activity_',tag))+
xlab('numb. of tweets') + ylab("proportion of users") + scale_x_continuous(limits=c(0,50),expand=c(0,0))  # Overlay with transparent density plot
print(activity_plot)
