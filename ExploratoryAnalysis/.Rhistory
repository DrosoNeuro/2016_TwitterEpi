score_lambda
SC_lambda
draw_Fisher <- function(x,lambda,y){
slope <- Fish_inf_lambda(lambda,y)
offst<- SC_lambda(lambda,y)-(slope*lambda)
score_line <- offst+slope*x
}
draw_Fisher
draw_Fisher
slope <- Fish_inf_lambda(lambda,y)
draw_Fisher(lambdas,lambda0,y1_lambda)
a <- draw_Fisher(lambdas,lambda0,y1_lambda)
a
lines
lines(lambdas,draw_Fisher(lambdas,lambda0,y1_lambda),lwd=lwd_glob)
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
offst<- SC_lambda(lambda,y)-(slope*lambda)
score_line <- offst+slope*x
draw_Fisher
Fish_inf_lambda
draw_Fisher <- function(x,lambda,y){
slope <- -Fish_inf_lambda(lambda,y)
offst<- SC_lambda(lambda,y)-(slope*lambda)
score_line <- offst+slope*x
}
par(mar = c(2,0.5,4,5))
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda0,y1_lambda),lwd=lwd_glob)
lines(lambdas,T1_lambda,lwd=lwd_glob+2,col="blue")
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda0,y1_lambda),lwd=lwd_glob)
upper <- SC_lambda(lambda0,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u(theta[0]) ",code=c(1,2),positx=positx,pos=1,col="black")
par(mar = c(2,0.5,4,5))
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- SC_lambda(lambda1,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u(theta[0]) ",code=c(1,2),positx=positx,pos=1,col="black")
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- SC_lambda(lambda0,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u(theta[0]) ",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda1,0,labelx="hat(theta)",labely="u(hat(theta))",code=c(1,2),positx=positx,pos=1,col="black")
upper <- draw_Fisher(lambda0,lambda0,y1_lambda)
upper
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- draw_Fisher(lambda0,lambda0,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u(theta[0]) ",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda1,0,labelx="hat(theta)",labely="u(hat(theta))",code=c(1,2),positx=positx,pos=1,col="black")
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
upper
draw_Fisher(lambdas,lambda1,y1_lambda)
a <- draw_Fisher(lambdas,lambda1,y1_lambda)
a
a <- draw_Fisher(lambda0,lambda1,y1_lambda)
a
upper <- draw_Fisher(lambda0,lambda1,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u(theta[0]) ",code=c(1,2),positx=positx,pos=1,col="black")
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- draw_Fisher(lambda0,lambda1,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u'(hat(theta)) ",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="u\'(hat(theta))",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="\u2110(theta[0])",code=c(1,2),positx=positx,pos=1,col="black")
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- draw_Fisher(lambda0,lambda1,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely="-\u2110(theta[0])",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely=".",code=c(1,2),positx=positx,pos=1,col="black")
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- draw_Fisher(lambda0,lambda1,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely=".",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda1,0,labelx="hat(theta)",labely="u(hat(theta))",code=c(1,2),positx=positx,pos=1,col="black")
polygon(coord.x,coord.y,col="skyblue")
Fisher_excerpt
score_excerpt <- draw_Fisher(lambdas_excerpt,lambda1,y1_lambda)
score_excerpt
coord.x <- c(lambdas_excerpt[1],lambdas_excerpt)
Fisher_excerpt <- draw_Fisher(lambdas_excerpt,lambda1,y1_lambda)
coord.x <- c(lambdas_excerpt[1],lambdas_excerpt)
coord.y <- c(0,Fisher_excerpt)
polygon(coord.x,coord.y,col="skyblue")
par(mar = c(2,0.5,4,5))
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda1,y1_lambda),lwd=lwd_glob)
upper <- draw_Fisher(lambda0,lambda1,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely=".",code=c(1,2),positx=positx,pos=1,col="black")
draw_lines_pois(lambda1,0,labelx="hat(theta)",labely="u(hat(theta))",code=c(1,2),positx=positx,pos=1,col="black")
Fisher_excerpt <- draw_Fisher(lambdas_excerpt,lambda1,y1_lambda)
coord.x <- c(lambdas_excerpt[1],lambdas_excerpt)
coord.y <- c(0,Fisher_excerpt)
polygon(coord.x,coord.y,col="skyblue")
par(mar = c(4,5,2,0.5))
plot(lambdas,score,"l",ylab=parse(text="u(theta)"),lwd=lwd_glob+2,xaxt="n",xlab="",main="log-likelihood ratio statistic",ylim=ylimits)
lines(lambdas,draw_Fisher(lambdas,lambda0,y1_lambda),lwd=lwd_glob)
lines(lambdas,draw_Fisher(lambdas,lambda0,y1_lambda),lwd=lwd_glob)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely=".",code=c(1,2),positx=positx,pos=1,col="black")
lines(lambdas,draw_Fisher(lambdas,lambda0,y1_lambda),lwd=lwd_glob)
upper <- draw_Fisher(lambda0,lambda0,y1_lambda)
draw_lines_pois(lambda0,upper,labelx="theta[0]",labely=".",code=c(1,2),positx=positx,pos=1,col="black")
score <- sapply(lambdas,SC_lambda,y1_lambda)
draw_arrows_pois2
243*3
243*3+364
log(6)/log(2)
pagerank <- function(A){
G <- A*theta + (1-theta)*matrix(rep(1/n,n*n),ncol=n,nrow=n)
x <- rep(1/n,n)
for (i in 1:100){
x <- x%*%G
}
return(x)
}
B <- matrix(c(0,1,0,0,0,0,0,0,0.5,0,0.5,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0),ncol=n,nrow=n,byrow=T)
pagerank <- function(A){
G <- A*theta + (1-theta)*matrix(rep(1/n,n*n),ncol=n,nrow=n)
x <- rep(1/n,n)
for (i in 1:100){
x <- x%*%G
}
return(x)
}
theta <- 0.999
n <- 6
pagerank(B)
B <- matrix(c(0,1,0,0,0,0,0,0,0.5,0,0.5,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0),ncol=n,nrow=n,byrow=T)
pagerank(B)
theta <- 0.001
B <- matrix(c(0,1,0,0,0,0,0,0,0.5,0,0.5,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0),ncol=n,nrow=n,byrow=T)
pagerank(B)
C <- matrix(c(0,1,0,1,0,0,0.5,0,0.5),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
theta <- 0.999
C <- matrix(c(0,1,0,1,0,0,0.5,0,0.5),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
theta <- 0.999
C <- matrix(c(0,1,0,1,0,0,0.5,0,0.5),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
theta <- 0.999
C <- matrix(c(0,1,1,1,0,0,0.5,0,0.5),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
C <- matrix(c(0,1/2,1/2,1,0,0,0.5,0,0.5),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
theta <- 0.001
C <- matrix(c(0,1/2,1/2,1,0,0,0.5,0,0.5),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
theta <- 0.001
C <- matrix(c(0,1,0,1/2,0,1/2,1,0,0),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
theta <- 0.999
pagerank(C)
C <- matrix(c(1/2,1/2,0,1/2,0,1/2,1,0,0),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
C <- matrix(c(0,1/2,1/2,1/2,0,1/2,1,0,0),ncol=3,nrow=3,byrow=T)
n <- 3
pagerank(C)
D <- matrix(c(0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,ncol=9,byrow=T)
D <- matrix(c(0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
D <- matrix(c(0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
n <- 9
theta <- 1
pagerank(C)
pagerank(D)
D
c(0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1/4,0,1/4,0,1/4,0,1/4,0)
D <- matrix(c(0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
D <- matrix(c(0,0,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
n <- 9
theta <- 1
pagerank(D)
theta
pagerank <- function(A){
G <- A*theta + (1-theta)*matrix(rep(1/n,n*n),ncol=n,nrow=n)
x <- rep(1/n,n)
for (i in 1:1000){
x <- x%*%G
}
return(x)
}
theta <- 0.001
B <- matrix(c(0,1,0,0,0,0,0,0,0.5,0,0.5,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0),ncol=n,nrow=n,byrow=T)
D <- matrix(c(0,0,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
n <- 9
theta <- 1
pagerank(D)
D <- matrix(c(0,0,0,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
n <- 9
theta <- 1
pagerank(D)
D <- matrix(c(0,0,0,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,1,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
n <- 9
theta <- 1
pagerank(D)
D <- matrix(c(0,0,0,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
pagerank(D)
D <- matrix(c(0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
pagerank(D)
D <- matrix(c(0,0,0,1,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
pagerank(D)
D <- matrix(c(0,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,0,
0,1/4,0,1/4,0,1/4,0,1/4,0)
,ncol=9,nrow=9,byrow=T)
pagerank(D)
help(dir.create)
getwd()
library("bigmemory")
library("biganalytics")
library("bigtabulate")
library("bigalgebra")
library("feather")
library("foreach")
library("doParallel")
feather_to_bigmatrix <- function(in_path="",out_path=""){
in_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/parsed/",in_path)
root_path <- "/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/"
out_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/bigtable/",out_path)
setwd(in_path)
files_to_process <- list.files(in_path,pattern=".*\\.feather")
cols <- c("userID","longitude","latitude","time", "sick", "state")
for (i in seq(1,length(files_to_process)-3,by=4)){
#start.time <- proc.time()
name <- paste0(gsub("([0-9]{7}).*","\\1",files_to_process[i]),
"-",
gsub("([0-9]{7}).*","\\1",files_to_process[i+3]))
temp1 <- as.matrix(read_feather(files_to_process[i]))
temp2 <- as.matrix(read_feather(files_to_process[i+1]))
temp3 <- as.matrix(read_feather(files_to_process[i+2]))
temp4 <- as.matrix(read_feather(files_to_process[i+3]))
temp <- rbind(temp1,temp2,temp3,temp4)
colnames(temp) <- cols
BigTemp <- as.big.matrix(temp,
backingfile=paste0(name,".bin"),
descriptor =paste0(name,".desc"),
backingpath = out_path)
#end.time <- proc.time()
#diff.time <- end.time-start.time
#cat("\n Loop: ", i , " finished after ", diff.time, "\n")
gc(reset=T)
}
}
subsets <- c("subset1","subset2","subset3","subset4")
feather_to_bigmatrix <- function(in_path="",out_path=""){
in_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/parsed/",in_path)
root_path <- "/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/"
out_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/bigtable/",out_path)
setwd(in_path)
files_to_process <- list.files(in_path,pattern=".*\\.feather")
cols <- c("userID","longitude","latitude","time", "sick", "state")
for (i in seq(1,length(files_to_process)-3,by=4)){
#start.time <- proc.time()
name <- paste0(gsub("([0-9]{7}).*","\\1",files_to_process[i]),
"-",
gsub("([0-9]{7}).*","\\1",files_to_process[i+3]))
temp1 <- as.matrix(read_feather(files_to_process[i]))
temp2 <- as.matrix(read_feather(files_to_process[i+1]))
temp3 <- as.matrix(read_feather(files_to_process[i+2]))
temp4 <- as.matrix(read_feather(files_to_process[i+3]))
temp <- rbind(temp1,temp2,temp3,temp4)
colnames(temp) <- cols
BigTemp <- as.big.matrix(temp,
backingfile=paste0(name,".bin"),
descriptor =paste0(name,".desc"),
backingpath = out_path)
#end.time <- proc.time()
#diff.time <- end.time-start.time
#cat("\n Loop: ", i , " finished after ", diff.time, "\n")
gc(reset=T)
}
}
subsets <- c("subset1","subset2","subset3","subset4")
cl<-makeCluster(spec = 4)
registerDoParallel(cl = cl)
start.time<-proc.time()
clusterSetRNGStream(cl = cl, iseed = 9182)
foreach (i = 1:length(subsets)) %dopar% {
require("feather")
require("bigmemory")
feather_to_bigmatrix(subsets[i],subsets[i])
}
end.time <- proc.time()
stopCluster(cl)
save.time<-end.time-start.time
stopCluster(cl)
feather_to_bigmatrix <- function(in_path="",out_path=""){
in_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/parsed/",in_path)
root_path <- "/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/"
out_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/bigtable/",out_path)
setwd(in_path)
files_to_process <- list.files(in_path,pattern=".*\\.feather")
cols <- c("userID","longitude","latitude","time", "sick", "state")
for (i in seq(1,length(files_to_process)-3,by=4)){
#start.time <- proc.time()
name <- paste0(gsub("([0-9]{7}).*","\\1",files_to_process[i]),
"-",
gsub("([0-9]{7}).*","\\1",files_to_process[i+3]))
temp1 <- as.matrix(read_feather(files_to_process[i]))
temp2 <- as.matrix(read_feather(files_to_process[i+1]))
temp3 <- as.matrix(read_feather(files_to_process[i+2]))
temp4 <- as.matrix(read_feather(files_to_process[i+3]))
temp <- rbind(temp1,temp2,temp3,temp4)
colnames(temp) <- cols
BigTemp <- as.big.matrix(temp,
backingfile=paste0(name,".bin"),
descriptor =paste0(name,".desc"),
backingpath = out_path)
#end.time <- proc.time()
#diff.time <- end.time-start.time
#cat("\n Loop: ", i , " finished after ", diff.time, "\n")
gc(reset=T)
}
}
subsets <- c("subset1","subset2","subset3","subset4")
cl<-makeCluster(spec = 4)
registerDoParallel(cl = cl)
start.time<-proc.time()
clusterSetRNGStream(cl = cl, iseed = 9182)
foreach (i = 1:length(subsets)) %dopar% {
require("feather")
require("bigmemory")
feather_to_bigmatrix(subsets[i])
}
end.time <- proc.time()
stopCluster(cl)
save.time<-end.time-start.time
save.time()
save.time
stopCluster(cl)
gc()
library("bigmemory")
library("biganalytics")
library("bigtabulate")
library("bigalgebra")
library("feather")
library("foreach")
library("doParallel")
in_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/","bigtable")
setwd(in_path)
descs <- list.files(in_path,pattern=".*\\.desc")
datadescs <- lapply(descs,dget)
data_sets <- lapply(datadescs,attach.big.matrix)
df <- data_sets[[1]]
head(df)
nrwo(df)
nrow(df)
out_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/","")
in_path <- out_path
setwd(in_path)
descs <- list.files(in_path,pattern=".*\\.desc")
datadescs <- lapply(descs,dget)
datadescs
datadescs <- dget(descs)
df2 <- attach.big.matrix(datadescs)
nrow(df2)
huge_set <- df2
rm(df2)
df1
df
head(df)
root_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/ExploratoryAnalysis/" # defining root_path containing all relevant documents
script_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/Non_R_Code/"
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
setwd(paste0(root_path,"functions/"))
root_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/ExploratoryAnalysis/" # defining root_path containing all relevant documents
script_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/Non_R_Code/"
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
library("gridExtra") #for saving png files in a specific order into pdf
library("ggplot2")
library('ggdendro')
library("scales") # for function alpha()
library("compiler")  # to speed up the computations!
library("plyr")
library("rgeos") #for creating maps
library("png") #for reading png files
library("grid") #for arranging png files
library("data.table") #for faster creation of crosstables from data set & for faster searches of datatables; brings about a lot of speed-up! https://github.com/Rdatatable/data.table/wiki/Getting-started
library("bit64") #for loading data with fread
library("lubridate") #for handling time and date information; http://stackoverflow.com/questions/10705328/extract-hours-and-seconds-from-posixct-for-plotting-purposes-in-r
library("timezone") #for getting timezones from lat/long data
library("feather") #for fast exporting and importing of data: http://blog.revolutionanalytics.com/2016/05/feather-package.html
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
load(file="datasets/sick_tweets.RData")
df
df
descs
out_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/","bigtable_merged")
in_path <- paste0("/media/drosoneuro/E230270C3026E6EF/tweet_ratings/all_tweets/","bigtable")
setwd(in_path)
descs <- list.files(in_path,pattern=".*\\.desc")
descs
df_desc
df_desc <- dget(descs[1])
df_desc
bigm_df <- attach.big.matrix(df_desc)
head(bigm_f)
head(bigm_df)
setwd(root_path) # set WD back
bigm_df2 <- deepcopy(bigm_df2)
bigm_df2 <- deepcopy(bigm_df)
help(deepcopy)
getwd()
bigm_df2 <- deepcopy(bigm_df,backingfile="bigm_df.bin",backingpath=".",descriptorfile="bigm_df.desc")
bigm_df <- bigm_df2
head(bigm_df)
