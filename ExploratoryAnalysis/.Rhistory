mins <- apply(diffs,1,min)
mins
tail(mins)
diffs
find_first <- function(array){
first <-min(which(array == TRUE))
}
mins <- apply(diffs,1,find_first)
mins
tail(mins)
#add rows with a zero in "sick" column for those weeks for which there is no entry
fill_missing <- function(aggregate_data){
weeks <- unique(aggregate_data$weekend)
years <- gsub("\\-.*","",weeks)
states <- unique(aggregate_data$statename)
for (i in 1:length(states)){
state_ind <- aggregate_data$statename == states[i]
missing_ind <- !(weeks %in% aggregate_data$weekend[state_ind])
n_row <- sum(missing_ind)
rows_to_add <- data.table(statename=rep(states[i],n_row))
rows_to_add$weekend <- weeks[missing_ind]
rows_to_add$year <- years[missing_ind]
rows_to_add$sick <- 0
aggregate_data <- rbind(aggregate_data,rows_to_add)
}
aggregate_data$year <- as.numeric(aggregate_data$year)
return(aggregate_data)
}
flu_aggregated <- fill_missing(flu_aggregated)
#calculate baseline values for non influenza weeks
#"Seasonal flu activity can begin as early as October and continue to occur as late as May"
#he baseline is developed by calculating the mean percentage of patient visits for ILI during non-influenza
#weeks for the previous three seasons and adding two standard deviations
#https://www.cdc.gov/flu/pastseasons/1314season.htm
#extract unseasonal weekends
endseason <- format.Date("2015-06-01","%m")
startseason <- format.Date("2015-10-01","%m")
weekends <- flu_aggregated$weekend
#also adds "season" label (all months before "startseason" are compared with baseline from previous year)
prev_season <- format.Date(weekends,"%m")<=startseason
flu_aggregated$season <- ifelse(prev_season,flu_aggregated$year-1,flu_aggregated$year)
#extract weekends outside flu season (weeks in June, July, August & September)
wk_subset <- (format.Date(weekends,"%m")<=startseason & format.Date(weekends,"%m")>=endseason)
no_season <- flu_aggregated[wk_subset,]
flu_baseline_calc <- function(aggregate_data){
weeks <- unique(aggregate_data$weekend)
years <- gsub("\\-.*","",weeks)
states <- unique(aggregate_data$statename)
sum_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,sum))
avg_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,mean))
sd_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,sd))
flu_baseline <- avg_flu[,.(year,statename)]
flu_baseline[,mean:= avg_flu$sick]
flu_baseline[,std:= sd_flu$sick]
flu_baseline[,sum:= sum_flu$sick]
return(flu_baseline)
}
flu_baseline <- flu_baseline_calc(no_season)
names(flu_baseline)[1] <- "season"
#assign activiy levels
#The activity levels compare the mean reported percent of visits due to ILI for the current week
#to the mean reported percent of visits due to ILI for non-influenza weeks.
#An activity level of 1 corresponds to values that are below the mean,
#level 2 corresponds to an ILI percentage less than 1 standard deviation above the mean,
#level 3 corresponds to ILI more than 1, but less than 2 standard deviations above the mean, and so on,
#with an activity level of 10 corresponding to ILI 8 or more standard deviations above the mean.
#https://www.cdc.gov/flu/weekly/overview.htm
add_label_thresholds <- function(flu_baseline){
std <- flu_baseline$std
avg <- flu_baseline$mean
flu_baseline$zero <- -999999
flu_baseline$one <- avg
flu_baseline$two <- avg+std
flu_baseline$three <- avg+2*std
flu_baseline$four <- avg+3*std
flu_baseline$five <- avg+4*std
flu_baseline$six <- avg+5*std
flu_baseline$seven <- avg+6*std
flu_baseline$eight <- avg+7*std
flu_baseline$nine <- avg+8*std
flu_baseline$ten <- avg+8*std+1e-5
return(flu_baseline)
}
flu_baseline <- add_label_thresholds(flu_baseline)
flu_aggregated <- aggregate(sick ~ statename+weekend+year,data=datatable,sum,na.rm=F)
#add rows with a zero in "sick" column for those weeks for which there is no entry
fill_missing <- function(aggregate_data){
weeks <- unique(aggregate_data$weekend)
years <- gsub("\\-.*","",weeks)
states <- unique(aggregate_data$statename)
for (i in 1:length(states)){
state_ind <- aggregate_data$statename == states[i]
missing_ind <- !(weeks %in% aggregate_data$weekend[state_ind])
n_row <- sum(missing_ind)
rows_to_add <- data.table(statename=rep(states[i],n_row))
rows_to_add$weekend <- weeks[missing_ind]
rows_to_add$year <- years[missing_ind]
rows_to_add$sick <- 0
aggregate_data <- rbind(aggregate_data,rows_to_add)
}
aggregate_data$year <- as.numeric(aggregate_data$year)
return(aggregate_data)
}
flu_aggregated <- fill_missing(flu_aggregated)
#calculate baseline values for non influenza weeks
#"Seasonal flu activity can begin as early as October and continue to occur as late as May"
#he baseline is developed by calculating the mean percentage of patient visits for ILI during non-influenza
#weeks for the previous three seasons and adding two standard deviations
#https://www.cdc.gov/flu/pastseasons/1314season.htm
#extract unseasonal weekends
endseason <- format.Date("2015-06-01","%m")
startseason <- format.Date("2015-10-01","%m")
weekends <- flu_aggregated$weekend
#also adds "season" label (all months before "startseason" are compared with baseline from previous year)
prev_season <- format.Date(weekends,"%m")<=startseason
flu_aggregated$season <- ifelse(prev_season,flu_aggregated$year-1,flu_aggregated$year)
#extract weekends outside flu season (weeks in June, July, August & September)
wk_subset <- (format.Date(weekends,"%m")<=startseason & format.Date(weekends,"%m")>=endseason)
no_season <- flu_aggregated[wk_subset,]
flu_baseline_calc <- function(aggregate_data){
weeks <- unique(aggregate_data$weekend)
years <- gsub("\\-.*","",weeks)
states <- unique(aggregate_data$statename)
sum_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,sum))
avg_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,mean))
sd_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,sd))
flu_baseline <- avg_flu[,.(year,statename)]
flu_baseline[,mean:= avg_flu$sick]
flu_baseline[,std:= sd_flu$sick]
flu_baseline[,sum:= sum_flu$sick]
return(flu_baseline)
}
flu_baseline <- flu_baseline_calc(no_season)
names(flu_baseline)[1] <- "season"
#assign activiy levels
#The activity levels compare the mean reported percent of visits due to ILI for the current week
#to the mean reported percent of visits due to ILI for non-influenza weeks.
#An activity level of 1 corresponds to values that are below the mean,
#level 2 corresponds to an ILI percentage less than 1 standard deviation above the mean,
#level 3 corresponds to ILI more than 1, but less than 2 standard deviations above the mean, and so on,
#with an activity level of 10 corresponding to ILI 8 or more standard deviations above the mean.
#https://www.cdc.gov/flu/weekly/overview.htm
add_label_thresholds <- function(flu_baseline){
std <- flu_baseline$std
avg <- flu_baseline$mean
flu_baseline$zero <- -999999
flu_baseline$one <- avg
flu_baseline$two <- avg+std
flu_baseline$three <- avg+2*std
flu_baseline$four <- avg+3*std
flu_baseline$five <- avg+4*std
flu_baseline$six <- avg+5*std
flu_baseline$seven <- avg+6*std
flu_baseline$eight <- avg+7*std
flu_baseline$nine <- avg+8*std
flu_baseline$ten <- avg+8*std+1e-5
return(flu_baseline)
}
flu_baseline <- add_label_thresholds(flu_baseline)
setkey(flu_baseline,season)
flu_aggregated <- merge(flu_baseline,flu_aggregated,by=c("season","statename"))
flu_aggregated$activity_level <- 0
diffs <- flu_aggregated[,seq(6,16),with=F]-flu_aggregated$sick
zeros <- diffs[,1]==-999999
diffs <- ifelse(diffs>=0,TRUE,FALSE)
diffs[zeros,] <- matrix(rep(c(TRUE,rep(FALSE,10)),sum(zeros)),sum(zeros),11,byrow=T)
find_first <- function(array){
first <-min(which(array == TRUE))
}
mins <- apply(diffs,1,find_first)
warnings()
diffs <- flu_aggregated[,seq(6,16),with=F]-flu_aggregated$sick
diffs
zeros <- diffs[,1]==-999999
zeros
tail(zeros)
diffs <- ifelse(diffs>=0,TRUE,FALSE)
diffs
tail(diffs)
diffs[zeros,] <- matrix(rep(c(TRUE,rep(FALSE,10)),sum(zeros)),sum(zeros),11,byrow=T)
tail(diffs)
find_first <- function(array){
first <-min(which(array == TRUE))
}
find_first(diffs[1,])
find_first <- function(array){
first <-min(which(array == TRUE))
return(first)
}
find_first(diffs[1,])
diffs[1,]
mins <- apply(diffs,1,find_first)-1
warnings()
diffs <- flu_aggregated[,seq(6,16),with=F]-flu_aggregated$sick
diffs
add_label_thresholds <- function(flu_baseline){
std <- flu_baseline$std
avg <- flu_baseline$mean
flu_baseline$zero <- -999999
flu_baseline$one <- avg
flu_baseline$two <- avg+std
flu_baseline$three <- avg+2*std
flu_baseline$four <- avg+3*std
flu_baseline$five <- avg+4*std
flu_baseline$six <- avg+5*std
flu_baseline$seven <- avg+6*std
flu_baseline$eight <- avg+7*std
flu_baseline$nine <- avg+8*std
flu_baseline$ten <- 999999
return(flu_baseline)
}
flu_baseline <- add_label_thresholds(flu_baseline)
flu_baseline
flu_aggregated <- aggregate(sick ~ statename+weekend+year,data=datatable,sum,na.rm=F)
#add rows with a zero in "sick" column for those weeks for which there is no entry
fill_missing <- function(aggregate_data){
weeks <- unique(aggregate_data$weekend)
years <- gsub("\\-.*","",weeks)
states <- unique(aggregate_data$statename)
for (i in 1:length(states)){
state_ind <- aggregate_data$statename == states[i]
missing_ind <- !(weeks %in% aggregate_data$weekend[state_ind])
n_row <- sum(missing_ind)
rows_to_add <- data.table(statename=rep(states[i],n_row))
rows_to_add$weekend <- weeks[missing_ind]
rows_to_add$year <- years[missing_ind]
rows_to_add$sick <- 0
aggregate_data <- rbind(aggregate_data,rows_to_add)
}
aggregate_data$year <- as.numeric(aggregate_data$year)
return(aggregate_data)
}
flu_aggregated <- fill_missing(flu_aggregated)
#calculate baseline values for non influenza weeks
#"Seasonal flu activity can begin as early as October and continue to occur as late as May"
#he baseline is developed by calculating the mean percentage of patient visits for ILI during non-influenza
#weeks for the previous three seasons and adding two standard deviations
#https://www.cdc.gov/flu/pastseasons/1314season.htm
#extract unseasonal weekends
endseason <- format.Date("2015-06-01","%m")
startseason <- format.Date("2015-10-01","%m")
weekends <- flu_aggregated$weekend
#also adds "season" label (all months before "startseason" are compared with baseline from previous year)
prev_season <- format.Date(weekends,"%m")<=startseason
flu_aggregated$season <- ifelse(prev_season,flu_aggregated$year-1,flu_aggregated$year)
#extract weekends outside flu season (weeks in June, July, August & September)
wk_subset <- (format.Date(weekends,"%m")<=startseason & format.Date(weekends,"%m")>=endseason)
no_season <- flu_aggregated[wk_subset,]
flu_baseline_calc <- function(aggregate_data){
weeks <- unique(aggregate_data$weekend)
years <- gsub("\\-.*","",weeks)
states <- unique(aggregate_data$statename)
sum_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,sum))
avg_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,mean))
sd_flu <- as.data.table(aggregate(sick~year+statename,data=aggregate_data,sd))
flu_baseline <- avg_flu[,.(year,statename)]
flu_baseline[,mean:= avg_flu$sick]
flu_baseline[,std:= sd_flu$sick]
flu_baseline[,sum:= sum_flu$sick]
return(flu_baseline)
}
flu_baseline <- flu_baseline_calc(no_season)
names(flu_baseline)[1] <- "season"
#assign activiy levels
#The activity levels compare the mean reported percent of visits due to ILI for the current week
#to the mean reported percent of visits due to ILI for non-influenza weeks.
#An activity level of 1 corresponds to values that are below the mean,
#level 2 corresponds to an ILI percentage less than 1 standard deviation above the mean,
#level 3 corresponds to ILI more than 1, but less than 2 standard deviations above the mean, and so on,
#with an activity level of 10 corresponding to ILI 8 or more standard deviations above the mean.
#https://www.cdc.gov/flu/weekly/overview.htm
add_label_thresholds <- function(flu_baseline){
std <- flu_baseline$std
avg <- flu_baseline$mean
flu_baseline$zero <- -999999
flu_baseline$one <- avg
flu_baseline$two <- avg+std
flu_baseline$three <- avg+2*std
flu_baseline$four <- avg+3*std
flu_baseline$five <- avg+4*std
flu_baseline$six <- avg+5*std
flu_baseline$seven <- avg+6*std
flu_baseline$eight <- avg+7*std
flu_baseline$nine <- avg+8*std
flu_baseline$ten <- 999999
return(flu_baseline)
}
flu_baseline <- add_label_thresholds(flu_baseline)
setkey(flu_baseline,season)
flu_aggregated <- merge(flu_baseline,flu_aggregated,by=c("season","statename"))
flu_aggregated$activity_level <- 0
diffs <- flu_aggregated[,seq(6,16),with=F]-flu_aggregated$sick
zeros <- diffs[,1]==-999999
diffs <- ifelse(diffs>=0,TRUE,FALSE)
diffs[zeros,] <- matrix(rep(c(TRUE,rep(FALSE,10)),sum(zeros)),sum(zeros),11,byrow=T)
find_first <- function(array){
first <-min(which(array == TRUE))
return(first)
}
mins <- apply(diffs,1,find_first)-1
flu_aggregated$activity_level <- apply(diffs,1,find_first)-1
labels <- unique(cdc_data$activity_level_label)
ac_lvls <- flu_aggregated$activity_level
flu_aggregated$activity_level_label <- ifelse(ac_lvls == 0,labels[5],
ifelse(ac_lvls >0 & ac_lvls <=3,labels[2],
ifelse(ac_lvls >3&ac_lvls <=5,labels[3],
ifelse(ac_lvls>5&ac_lvls <=7,labels[4],labels[1]))))
flu_aggregated
#function to extract geodata needed for plotting hexbins
library("scales") # for function colour_ramp()
library("maps")
library("animation")
#function to retrievestatenames
state_names <- function() {
us_states <- map('state', plot = F)
us_states$names <-
gsub("new york:manhattan", "new york city", us_states$names)
us_states$names <-
gsub("new york:main", "new york city", us_states$names)
us_states$names <- gsub("\\:.*", "", us_states$names)
states <- data.table(us_states$names)
colnames(states) <- "statename"
return(states)
}
#function to plot legends
leg <- function(leg_title="",boxColours){
pushViewport(viewport(x=0.25,y=0.8,width=1,height=0.2))
grid.text(leg_title,gp=gpar(lwd=3,fontsize=15))
popViewport()
nlabels <- 11
pushViewport(viewport(layout = grid.layout(1, 2,
widths = unit.c(unit(0.2,"npc"), unit(0.8,"npc")))))
pushViewport(viewport(layout.pos.col=1))
pushViewport(viewport(x=0, y=0.45, width=1,height=0.5))
vp_grid <- viewport(layout = grid.layout(nlabels, 1))
pushViewport(vp_grid)
for (i in 1:nlabels) {
pushViewport(viewport(layout.pos.row = i))
grid.rect(gp = gpar(col=boxColours[i],fill = boxColours[i]))
popViewport()
}
popViewport(3)
pushViewport(viewport(layout.pos.col=2))
pushViewport(viewport(x=0.5, y=0.45, width=1,height=0.5))
pushViewport(vp_grid)
for (i in  1:nlabels){
pushViewport(viewport(layout.pos.row = i))
grid.text(i-1)
popViewport()
}
popViewport(4)
}
#function to plot flu activity per state
state_flu_activity <- function(us_states,main_title="",cols,boxColours){
grid.newpage()
if (main_title!=""){
heights <- unit.c(unit(0.05,"npc"),unit(0.95,"npc"))
} else{
heights <- unit.c(unit(0,"npc"),unit(1,"npc"))
}
pushViewport(viewport(layout = grid.layout(2, 1, heights=heights)))
pushViewport(viewport(layout.pos.row=1))
grid.text(main_title,y=unit(-0.2,"npc"),gp=gpar(lwd=3,fontsize=20),just="centre")
popViewport()
pushViewport(viewport(layout.pos.row=2))
pushViewport(viewport(layout = grid.layout(1, 2,
widths = unit.c(unit(0.9,"npc"), unit(0.1,"npc")))))
#plot legend
pushViewport(viewport(layout.pos.col=2))
leg(leg_title="Flu activity level",boxColours)
popViewport()
#plot map & hexbin
pushViewport(viewport(layout.pos.col=1))
width <- 4
height <- 2
xbnds <- us_states$range[1:2]
ybnds <- us_states$range[3:4]
xrange <- range(xbnds)+ width/2*c(-1,0.2)
yrange <- range(ybnds) + height/2*c(-1,0.2)
vp <- viewport(x=0.5,y=0.5,width=0.9,height=0.85,
xscale=xrange,yscale=yrange)
pushViewport(vp)
grid.xaxis()
grid.yaxis()
popViewport()
pushViewport(viewport(x=0.5, y=0.5, width=0.9, height=0.85,
xscale=xrange, yscale=yrange, clip="on"))
single_states <- c(1,which(is.na(us_states$x))) #get index boundaries of single state data frames
for (i in 2:length(single_states)){
grid.polygon(unit(us_states$x[single_states[i-1]:single_states[i]],"native"),unit(us_states$y[single_states[i-1]:single_states[i]],"native"),
gp=gpar(col="black",fill=cols[i]))
}
popViewport(2)
}
#meta-function to combine all of the abvoe
plot_flu_states <- function(data,filename="") {
data <-
data[, .(statename, activity_level, weekend, activity_level_label)]
states <- state_names()
weeks <- unique(data$weekend)
n <- length(weeks)
#leg_ind <- c(0,1,4,6,8)
leg_lab <- unique(data$activity_level_label)
leg_nr <- c("1-3: ","4-5: ","6-7: ","8-10: ","0: ")
leg_lab <- paste0(leg_nr,leg_lab)
leg_lab <- leg_lab[order(leg_lab)]
#define colourramp
cr <- colour_ramp(c("white", "yellow", "red"))
legcols <- cr(seq(0,1,by=0.1))
ani.options("interval"=0.5)
saveVideo({
for (i in 1:n) {
#prepare statemap
temp <- data[weekend==weeks[i],]
temp <- temp[,.(statename,activity_level)]
temp <- merge(temp,states,by="statename")
flu_cols <- cr(temp$activity_level / 10)
us_states <- map("state", plot=F,fill=T,col=flu_cols)
state_flu_activity(us_states,main_title=as.character(weeks[i]),cols=flu_cols,boxColours=legcols)
}
},video.name=filename,ani.width = 1000, ani.height = 600)
}
getwd()
plot_flu_states(flu_aggregated)
plot_flu_states(flu_aggregated)
#meta-function to combine all of the abvoe
plot_flu_states <- function(data,filename="animation.mp4") {
data <-
data[, .(statename, activity_level, weekend, activity_level_label)]
states <- state_names()
weeks <- unique(data$weekend)
n <- length(weeks)
#leg_ind <- c(0,1,4,6,8)
leg_lab <- unique(data$activity_level_label)
leg_nr <- c("1-3: ","4-5: ","6-7: ","8-10: ","0: ")
leg_lab <- paste0(leg_nr,leg_lab)
leg_lab <- leg_lab[order(leg_lab)]
#define colourramp
cr <- colour_ramp(c("white", "yellow", "red"))
legcols <- cr(seq(0,1,by=0.1))
ani.options("interval"=0.5)
saveVideo({
for (i in 1:n) {
#prepare statemap
temp <- data[weekend==weeks[i],]
temp <- temp[,.(statename,activity_level)]
temp <- merge(temp,states,by="statename")
flu_cols <- cr(temp$activity_level / 10)
us_states <- map("state", plot=F,fill=T,col=flu_cols)
state_flu_activity(us_states,main_title=as.character(weeks[i]),cols=flu_cols,boxColours=legcols)
}
},video.name=filename,ani.width = 1000, ani.height = 600)
}
plot_flu_states(flu_aggregated)
setkey(flu_aggregated,weekend)
plot_flu_states(flu_aggregated)
flu_aggregated
merged_set <- merge(flu_aggregated,cdc_data,by=c("weekend","state"))
merged_set <- merge(flu_aggregated,cdc_data,by=c("weekend","statename"))
merged_set
merged_set$diff <- merged_set$activity_level.x-merged_set$activity_level.y
merged_set$diff
merged_set
merged_set$activity_level <- merged_set$activity_level.x-merged_set$activity_level.y
merged_set$activite_level_label <- merged_set$activite_level_label.x
merged_set$activity_level_label <- merged_set$activity_level_label.x
merged_set$activity_level <- merged_set$activity_level.x-merged_set$activity_level.y
merged_set$activity_level
merged_set$activity_level+10/2
(merged_set$activity_level+10)/2
#meta-function to combine all of the abvoe
plot_flu_diff_states <- function(data,filename="animation.mp4") {
data <-
data[, .(statename, activity_level, weekend, activity_level_label)]
states <- state_names()
weeks <- unique(data$weekend)
n <- length(weeks)
#leg_ind <- c(0,1,4,6,8)
leg_lab <- unique(data$activity_level_label)
leg_nr <- c("1-3: ","4-5: ","6-7: ","8-10: ","0: ")
leg_lab <- paste0(leg_nr,leg_lab)
leg_lab <- leg_lab[order(leg_lab)]
#define colourramp
cr <- colour_ramp(c("blue", "white", "red"))
legcols <- cr(seq(0,1,by=0.1))
ani.options("interval"=0.5)
saveVideo({
for (i in 1:n) {
#prepare statemap
temp <- data[weekend==weeks[i],]
temp <- temp[,.(statename,activity_level)]
temp <- merge(temp,states,by="statename")
flu_cols <- cr(temp$activity_level / 10)
us_states <- map("state", plot=F,fill=T,col=flu_cols)
state_flu_activity(us_states,main_title=as.character(weeks[i]),cols=flu_cols,boxColours=legcols)
}
},video.name=filename,ani.width = 1000, ani.height = 600)
}
merged_set$activity_level <- merged_set$activity_level.x-merged_set$activity_level.y
merge_set$activity_level <- (merged_set$activity_level+10)/2
merged_set$activity_level_label <- merged_set$activity_level_label.x
merged_set$activity_level <- merged_set$activity_level.x-merged_set$activity_level.y
merged_set$activity_level <- (merged_set$activity_level+10)/2
merged_set$activity_level_label <- merged_set$activity_level_label.x
plot_flu_diff_states(merged_set)
merged_set$activity_level <- merged_set$activity_level.y-merged_set$activity_level.x
merged_set$activity_level.x
flu_aggregated$activity_level
merged_set$activity_level <- merged_set$activity_level.y-merged_set$activity_level.x
merged_set$activity_level <- (merged_set$activity_level+10)/2
merged_set$activity_level_label <- merged_set$activity_level_label.x
plot_flu_diff_states(merged_set)
