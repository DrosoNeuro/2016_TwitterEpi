11:40:00 AM
12:01:00 PM
02:14:00 PM
05:50:00 PM
01:44:00 PM
04:27:00 PM
04:12:00 PM
08:25:00 PM
02:41:00 PM
09:08:00 PM
01:23:00 PM
01:47:00 PM
04:16:00 PM
03:15:00 PM
11:41:00 AM
06:57:00 PM
01:26:00 PM
03:37:00 PM
04:40:00 PM
05:16:00 PM
06:08:00 PM
06:55:00 PM
07:39:00 PM
09:33:00 PM
08:35:00 PM
10:35:00 PM
10:17:00 PM
07:54:00 PM
01:29:00 PM
11:39:00 AM
01:54:00 PM
08:48:00 PM
05:41:00 PM
08:59:00 AM
09:34:00 AM
10:01:00 PM
11:30:00 AM
10:20:00 PM
01:00:00 PM
04:06:00 PM
06:18:00 PM
12:56:00 PM
01:50:00 PM
06:49:00 PM
07:05:00 PM
11:44:00 AM
01:01:00 PM
04:51:00 PM
04:14:00 PM
10:16:00 PM
12:28:00 PM
03:17:00 PM
09:10:00 PM
12:05:00 PM
04:45:00 PM
11:45:00 AM
08:52:00 PM
09:07:00 PM
06:37:00 PM
03:36:00 PM
05:03:00 PM
12:38:00 PM
getwd()
read("Tracking.csv")
a<- read.ftable("Tracking.csv")
help("read.ftable")
help("read.ftable",sep=";")
a<- read.ftable("Tracking.csv",sep=";")
a<- read.ftable("Tracking.csv",sep=";",row.var.names=NA)
help("read.csv")
a <- read.table("Tracking.csv",sep=";")
a <- read.table("Tracking.csv",sep=";")
a
a <- read.table("Tracking.csv",sep=";")
a <- read.table("Tracking.csv",sep=";",fill=T)
a
a <- read.table("Tracking.csv",sep=";",fill=T,header=T)
a <- read.table("Tracking.csv",sep=";",fill=T,header=T)
a <- read.table("Tracking.csv",sep=";",fill=T)
head8a
head(a)
a <- read.table("Tracking.csv",sep=";",fill=T,header=T)
a
help(hist)
help("barplot")
plot(a$Uhrzeit,a$Likes)
plot(a$Uhrzeit,a$Likes,"lines")
help(plotg)
help(plot)
plot(a$Uhrzeit,a$Likes,"l")
plot(a$Uhrzeit,a$Likes,type="l")
plot(a$Uhrzeit,a$Likes,type="p")
help(ts)
as.ts(data=a)
a$Uhrzeit
a <- read.table("Tracking.csv",sep=";",fill=T,header=T)
a
a$Uhrzeit
plot(a$Uhrzeit,a$Likes,type="p")
successes <- a[a$Likes >10,]
successes
suc <- successes
remove(successes)
plot(suc$Uhrzeit,suc$Likes)
hist(suc$Uhrzeit)
Uhrzeit
as.numeric(suc$Uhrzeit)
hist(as.numeric(suc$Uhrzeit))
b < - plot(suc$Uhrzeit,suc$Likes)
b <- plot(suc$Uhrzeit,suc$Likes)
str(b)
b$stats
round(suc$Uhrzeit)
suc$Uhrzeit
as.Date(a$Uhrzeit)
str(a$Uhrzeit)
help(chron)
help("POSIXt")
as.PO
as.POSIXct(a$Uhrzeit)
as.date(a$Uhrzeit,formate="%h:%m:%s")
as.Date(a$Uhrzeit,formate="%h:%m:%s")
a <- read.table("Tracking.csv",sep=";",fill=T,header=T)
plot(a$Uhrzeit,a$Likes)
str(a$Uhrzeit)
as.Date(a$Uhrzeit,formate="%h:%m:%s")
library(chron)
install.packages("chron")
library(chron)
a$Uhrzeit <- chron(times=a$Uhrzeit)
str(a$Uhrzeit)
plot(a$Uhrzeit,a$Likes)
plot(a$Uhrzeit,a$Likes,"L")
plot(a$Uhrzeit,a$Likes,"l")
plot(a$Uhrzeit,a$Likes)
suc <- a[a$Likes > 10,]
hist(suc$Uhrzeit)
help(hist)
suc$Uhrzeit
a$Uhrzeit
b <- hist(suc$Uhrzeit)
str(b)
b$breaks*24
hist(suc$Uhrzeit,xlab=b$breaks*24)
hist(suc$Uhrzeit,xlab=as.character(b$breaks*24))
b$breaks*24
help(barplot)
hist(suc$Uhrzeit)
help(hist)
a$Uhrzeit
a$Likes
a$Likes[a$Likes==NA] <- 0
a$Likes
a$Likes[a$Likes==NA]
a$Likes
a$Likes[which(a$Likes==NA)]
which(a$Likes==NA)
a$Likes[is.na(a$Likes)] <- 0
a$Likes
plot(a$Uhrzeit,a$Likes)
help(glm)
help(poly)
str(a)
help(order)
b <- order(a$Uhrzeit)
b
a <- a[order(a$Uhrzeit),]
plot(a$Uhrzeit,a$Likes)
m1 <- lm(a$Likes ~ poly(a$Uhrzeit,3))
m1
plot(m1)
help(lm1)
help(lm)
help("predict")
help(chron)
t <- seq(06,24,by=0.2)
t
t1 <- seq(06,24,by=0.2)
p1 <- predict.lm(m1,t)
m1 <- lm(a$Likes ~ poly(a$Uhrzeit,3))
t1 <- seq(06,24,by=0.2)
p1 <- predict.lm(m1,t)
p1 <- predict.lm(m1)
plot(p1)
install.packages("forecast")
library("forecast")
library("forecast")
n <- 2000
m <- 200
y <- ts(rnorm(n) + (1:n)%%100/30, f=m)
library(forecast)
fit <- Arima(y, order=c(2,0,1), xreg=fourier(y, K=4))
plot(forecast(fit, h=2*m, xreg=fourierf(y, K=4, h=2*m)))
help(Arima)
likes <- ts(a$Likes)
likes
help(ts)
help(auto.arima)
install.packages("zoo")
install.packages("zoo")
help(zoo)
library("zoo")
help(zoo)
help("aggregate")
z <- aggregate(zoo(x),tt,tail,1)
tt <- a$Uhrzeit
x <- a$Likes
z <- aggregate(zoo(x),tt,tail,1)
z
str(z)
zoo(x)
merge(z,zoo(,time(as.ts(z))),fill=0)
z
help(merge)
tt <- c("2003-03-05", "2003-03-05", "2003-05-05" ,"2003-04-07" ,"2003-03-05")
x <- 1:5
z <- aggregate(zoo(x), as.Date(tt), tail, 1)
merge(z, zoo(, time(as.ts(z))), fill = 0)
z
tt <- a$Uhrzeit
x <- a$Likes
zoo(x)
x
zoo(x)
help(zoo)
zoo(tt)
help(forecast)
help(auto.arima)
a
library(forecast)
help(auto.arima)
help(ts)
plot(a$Uhrzeit,a$Likes,"l")
help(plot)
plot(a$Uhrzeit*24,a$Likes,"l")
suc <- a[a$Likes >5,]
plot(b$Uhrzeit*24,b$Likes,"l")
b
plot(suc$Uhrzeit*24,suc$Likes,"l")
suc <- a[a$Likes >10,]
plot(suc$Uhrzeit*24,suc$Likes,"l")
plot(suc$Tag,suc$Likes)
plot(suc$Tag,suc$Likes)
plot(a$Tag,a$Likes)
suc <- a[a$Likes >10 && a$Likes < 40,]
plot(suc$Uhrzeit*24,suc$Likes,"l")
suc
suc <- a[which(a$Likes >10 && a$Likes < 40),]
suc
a
suc <- a[which((a$Likes >10) && (a$Likes < 40)),]
suc
(a$Likes >10) && (a$Likes < 40))
(a$Likes >10) && (a$Likes < 40)
a$Likes >10 && a$Likes < 40
a$Likes >10 %in% a$Likes < 40
(a$Likes >10) %in% (a$Likes < 40)
suc <- a[a$Likes >10,]
suc <- suc[suc$Likes < 40]
plot(suc$Uhrzeit*24,suc$Likes,"l")
suc <- a[a$Likes >10,]
suc <- suc[suc$Likes < 40,]
plot(suc$Uhrzeit*24,suc$Likes,"l")
50*310
267/9*219
267/9
9/267*219
9/267*37
12*3.6
280+400+1000+200+560+1500
280+400+1000+200+560+1500+600+200
setwd("~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/TestingCode/animation")
library(ggmap)
library(ggplot2)
library(gganimate)
g <- read.csv("ghanafloods_data.csv")
head(g)
g$date <- as.Date(g$date, format = "%d/%m/%Y")
head(g)
g <- g[order(g$date),]
head(g)
p <- ggmap(get_map("Ghana", zoom = 7))
print(p)
p + geom_point(data = g, aes(x = lon, y = lat, col = Legend), size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n")
p <- p + geom_point(data = g, aes(x = lon, y = lat, frame = date, col = Legend,cumulative = TRUE), size = 7, alpha = 0.3) + scale_color_manual(values ="red1") + labs(title = "Ghana Floods from March, 2016 - July, 2016 \n")
gg_animate(p, outfile = "outfile.gif", convert = "gm convert", ani.width = 700, title_frame = TRUE)
install.packages("gg_animate")
help("gganimate")
gganimate(p, outfile = "outfile.gif", convert = "gm convert", ani.width = 700, title_frame = TRUE)
p <- p + geom_point(data = g, aes(x = lon, y = lat, frame = date, col = Legend,cumulative = TRUE), size = 7, alpha = 0.3) + scale_color_manual(values ="red1") + labs(title = "Ghana Floods from March, 2016 - July, 2016 \n")
help("geom_point")
p <- p + geom_point(data = g, aes(x = lon, y = lat, col = Legend, cumulative = TRUE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n")
suppressWarnings(p <- p + geom_point(data = g, aes(x = lon, y = lat,frame = date, col = Legend, cumulative = TRUE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n"))
gganimate(p, outfile = "outfile.gif", convert = "gm convert", ani.width = 700, title_frame = TRUE)
install.packages("cowplot")
gganimate(p, outfile = "outfile.gif", convert = "gm convert", ani.width = 700, title_frame = TRUE)
suppressWarnings(p <- p + geom_point(data = g, aes(x = lon, y = lat,frame = date, col = Legend, cumulative = TRUE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n"))
gganimate(p)
p <- ggmap(get_map("Ghana", zoom = 7))
p <- ggmap(get_map("Ghana", zoom = 7))
print(p)
suppressWarnings(p <- p + geom_point(data = g, aes(x = lon, y = lat,frame = date, col = Legend, cumulative = TRUE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n"))
gganimate(p)
suppressWarnings(p <- p + geom_point(data = g, aes(x = lon, y = lat,frame = date, col = Legend, cumulative = FALSE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n"))
gganimate(p)
p <- ggmap(get_map("Ghana", zoom = 7))
suppressWarnings(p <- p + geom_point(data = g, aes(x = lon, y = lat,frame = date, col = Legend, cumulative = FALSE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n"))
p <- ggmap(get_map("Ghana", zoom = 7))
print(p)
suppressWarnings(p <- p + geom_point(data = g, aes(x = lon, y = lat,frame = date, col = Legend, cumulative = FALSE),
size = 7, alpha = 0.3) + scale_color_manual(values ="red1") +
labs(title = "Ghana Floods from March, 2016 - July, 2016 \n"))
p
gganimate(p, outfile = "outfile.gif", convert = "im convert", ani.width = 700, title_frame = TRUE)
help(gganimate)
library(animation)
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
help(saveGif)
help(saveGIF)
saveMovie({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveHTML({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
library("gridExtra") #for saving png files in a specific order into pdf
library("ggplot2")
library('ggdendro')
# library("TSclust")
#library("ggmap") #used to plot maps
#library("maps") #used to plot maps
library("scales") # for function alpha()
library("compiler")  # to speed up the computations!
library("plyr")
library("rgeos") #for creating maps
library("png") #for reading png files
library("grid") #for arranging png files
library("data.table") #for faster creation of crosstables from data set & for faster searches of datatables; brings about a lot of speed-up! https://github.com/Rdatatable/data.table/wiki/Getting-started
library("bit64") #for loading data with fread
library("lubridate") #for handling time and date information; http://stackoverflow.com/questions/10705328/extract-hours-and-seconds-from-posixct-for-plotting-purposes-in-r
#install.packages("devtools") > for install_github
#install_github("rundel/timezone") #needs terminal commands: http://stackoverflow.com/questions/33381421/how-to-upgrade-proj4-for-rgdal
#sudo apt-get install libgdal-dev libproj-dev
library("timezone") #for getting timezones from lat/long data
library("feather") #for fast exporting and importing of data: http://blog.revolutionanalytics.com/2016/05/feather-package.html
#other possibility for fast exporting data is fwrite() using the data.table package: http://blog.h2o.ai/2016/04/fast-csv-writing-for-r/
root_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/ExploratoryAnalysis/" # defining root_path containing all relevant documents
script_path <- "~/Dropbox/UZH_Master/Masterarbeit/TwitterEpi/Non_R_Code/"
###load functions & databases needed for this script -------------
setwd(paste0(root_path,"functions/"))
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd(root_path) # set WD back
#source("datasets/load_csv.R")
#source("datasets/load_feather.R")
#if neither of the above two scripts has been excecuted, you must uncomment it in order to get dataset for further analysis
load(file="datasets/sick_tweets.RData")
library(animation)
datatable <- df
head(datatable)
datatable$date <- as.Date(datatable$date)
datatable$date <- as.Date(datatable$time)
head(datatable)
datatable$date <- as.Date(datatable$time,origin="1970-01-01")
datatable$date
head(datatable$time)
datatable$date <- as.Date(datatable$time,origin="1970-01-01")
datatable$time <- as.Date(datatable$time,origin="1970-01-01")
head(datatable$time)
datatable y- df
datatable <- df
datatable$time <- as.POSIXct(datatable$time,origin="1970-01-01")
head(datatable)
datatable[,date:=as.Date(time,format="%Y-%m-%d")] #stripping exact time information
head(datatable)
datatable <- datatable[order(datatable$date),]
head(datatable)
tail(datatable)
head(datatable)
which(datatabl$date == as.Date(1970-01-01))
which(datatable$date == as.Date(1970-01-01))
which(datatable$date == as.Date("1970-01-01"))
which(datatable$date == as.Date("1970-01-02"))
datatable <- datatable[datatable$date==as.Date("1970-01-01"),]
head(datatable)
datatable
datatable[,date:=as.Date(time,format="%Y-%m-%d")] #stripping exact time information
datatable
datatable <- df
datatable$time <- as.POSIXct(datatable$time,origin="1970-01-01")
datatable[,date:=as.Date(time,format="%Y-%m-%d")] #stripping exact time information
datatable <- datatable[order(datatable$date),]
datatable <- datatable[!datatable$date==as.Date("1970-01-01"),]
head(datatable)
n <- unique(datatable$date)
n
head(datatable)
datatable$time <- as.POSIXct(datatable$time,origin="1970-01-01")
datatable[,date:=as.Date(time,format="%Y-%m-%d")] #stripping exact time information
datatable <- datatable[order(datatable$date),]
datatable <- df
datatable$time <- as.POSIXct(datatable$time,origin="1970-01-01")
datatable[,date:=as.Date(time,format="%Y-%m-%d")] #stripping exact time information
datatable <- datatable[order(datatable$date),]
datatable <- datatable[!datatable$date==as.Date("1970-01-01"),]
days <- unique(datatable$date)
n <- length(days)
n <- 10
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude)
}
})
help(p)
help(plot)
plot(subset$longitude,subset$latitude,'r.')
n <- 10
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,'r.')
}
})
}
n <- 10
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,'r.')
}
})
help(plot)
plot(subset$longitude,subset$latitude,'.',col="red")
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,col="red")
}
})
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,col="red",xlim=lon,ylim=lat)
}
})
lon <- coord[1:2]
lat <- coord[3:4]
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,col="red",xlim=lon,ylim=lat)
}
})
coord <- c(-125,-66,25,50)
lon <- coord[1:2]
lat <- coord[3:4]
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,col="red",xlim=lon,ylim=lat)
}
})
head(datatble)
head(datatatable)
head(datatable)
gc()
days <- unique(datatable$date)
n <- length(days)
lon <- coord[1:2]
lat <- coord[3:4]
saveHTML({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,col="blue",xlim=lon,ylim=lat)
}
})
help(saveHTML)
n <- 10
saveVideo({
for (i in 1:n)
{
subset <- datatable[datatable$date==days[i],]
plot(subset$longitude,subset$latitude,col="blue",xlim=lon,ylim=lat)
}
})
