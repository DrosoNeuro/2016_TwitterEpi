/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package user_interface;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.tartarus.snowball.ext.englishStemmer;
import twitter.tweet;
import weka.filters.unsupervised.attribute.StringToWordVector;

/**
 * Based off of frequent_keywords, but with no lower bound of the number of appearances required
 * @author toddbodnar
 */
public class word_frequencies implements twitterprocess{
    public word_frequencies()
    {
        
        candidates = new HashMap<String,Integer>();
    }
    public word_frequencies(String save)
    {
        this();
        outfile = save;
    }
    @Override
    public void consume(tweet t) {
        String text = " "+t.text.toUpperCase()+" ";
        text = text.replace(".", " ");
        text = text.replace(",", " ");
        text = text.replace(";", " ");
        text = text.replace(":", " ");
        text = text.replace("(", " ");
        text = text.replace(")", " ");
        text = text.replace("-", " ");
        text = text.replace("[", " ");
        text = text.replace("]", " ");
        text = text.replace("!", " ");
        text = text.replace("@", " ");
        text = text.replace("#", " ");
        text = text.replace("$", " ");
        text = text.replace("%", " ");
        text = text.replace("^", " ");
        text = text.replace("&", " ");
        text = text.replace("*", " ");
        text = text.replace("\\", " ");        
        text = text.replace("/", " ");
        text = text.replace("?", " ");
        text = text.replace("~", " ");
        text = text.replace("`", " ");
        text = text.replace("_", " ");
        text = text.replace("+", " ");
        text = text.replace("=", " ");
        text = text.replace("<", " ");
        text = text.replace(">", " ");
        text = text.replace("{", " ");
        text = text.replace("}", " ");
        
        for(String s : text.split("\\ "))
        {
            
           
            
            String stemmed = s.toUpperCase();
            
            if(candidates.containsKey(stemmed))
            {
                int value = candidates.get(stemmed);
                candidates.put(stemmed,value+1);
            }
            else
            {
                candidates.put(stemmed, 1);
            }
        }
    }

    @Override
    public String end() {
        PrintStream out = null;
        try {
            out = new PrintStream(new FileOutputStream(new File(outfile)));
            for(String s: candidates.keySet())
                out.println(s+","+candidates.get(s));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(word_frequencies.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            out.close();
            return "Word Count: \n\nFound "+candidates.size()+" words.";
        }
    }
    
    String outfile = null;

    @Override
    public boolean quitAtEnd() {
        return true;
    }
    englishStemmer stem;
    Map <String,Integer> candidates;

    @Override
    public String buttonMenu() {
        return "Count all words";
    }
    
    public String toolTip()
    {
        return "Counts the number of times each word appears";
    }

    @Override
    public twitterprocess clone() {
        return new word_frequencies(JOptionPane.showInputDialog("Output file name?"));
    }

    @Override
    public twitterprocess load(String in) {
        return new word_frequencies(in);
    }

    @Override
    public String save() {
        return outfile;
    }
}
