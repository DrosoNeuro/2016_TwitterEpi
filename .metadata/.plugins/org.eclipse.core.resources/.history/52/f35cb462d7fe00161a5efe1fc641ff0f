/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package classification;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Vector;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.LibSVM;
import weka.classifiers.meta.FilteredClassifier;
import weka.core.Attribute;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.StringToWordVector;

/**
 *
 * @author toddbodnar
 */
public class wekaClassifier implements classifier{
        public wekaClassifier(Vector<String> positive,Vector<String> negative) throws  Exception
    {
        //SimpleWordsDataSource data = new SimpleWordsDataSource();
        
        
        FastVector fv = new FastVector(2);
        FastVector types = new FastVector(2);
        types.addElement("flu");
        types.addElement("noflu");
        Attribute text = new Attribute("text", (FastVector) null);
        Attribute value = new Attribute("type", types);

        
        fv.addElement(text);
        fv.addElement(value);
        
        Instances dataset = new Instances("value",fv,1);
        
        
        for(String s: positive)
        {
            //System.out.println(s);
            Instance i = new Instance(2);
            i.setDataset(dataset);
            i.setValue(text, s);
            i.setValue(value, "flu");
            dataset.add(i);
        }
        
        
        for(String s: negative)
        {
            //System.out.println(s);
            Instance i = new Instance(2);
            i.setDataset(dataset);
            i.setValue(text, s);
            i.setValue(value, "noflu");
            dataset.add(i);
        }
       
        
       dataset.setClassIndex(dataset.numAttributes() - 1);
       
       //System.out.println(dataset);
        
       FilteredClassifier model = new FilteredClassifier();
       StringToWordVector stwv = new StringToWordVector();
       stwv.setStemmer(new weka.core.stemmers.LovinsStemmer());
       stwv.setLowerCaseTokens(true);
       stwv.setOutputWordCounts(true);
      
      // System.out.println(stwv.getStopwords());;
       
       model.setFilter(stwv);
       
       NaiveBayes nb = new NaiveBayes();
       
       LibSVM svm = new LibSVM();
       BayesNet bn = new BayesNet();
       
       svm.setDebug(false);
       model.setDebug(false);
       model.setClassifier(svm);
       
       model.buildClassifier(dataset);
       
       
      
       
       // System.out.println(model);
       classifier = model;
        
    }
    
    public double getValue(String input) throws Exception
    {
        if(cut<0)
            return getProbability(input);
        else
            if(cut<getProbability(input))
                return 1;
                else
                return 0;
    }
    
    public double getProbability(String input) throws Exception
    {
        FastVector fv = new FastVector(2);
        FastVector types = new FastVector(2);
        types.addElement("flu");
        types.addElement("noflu");
        Attribute text = new Attribute("text", (FastVector) null);
        Attribute value = new Attribute("type", types);
        
        
        fv.addElement(text);
        fv.addElement(value);
        
        Instances dataset = new Instances("value",fv,1);
        
        
        
            //System.out.println(s);
            Instance i = new Instance(2);
            i.setDataset(dataset);
            i.setValue(text, input.toUpperCase());
            //i.setValue(value,"flu");
            //i.setClass(value);
            dataset.add(i);
      
            dataset.setClass(value);
            i.setClassMissing();
      
            //System.out.println(classifier.distributionForInstance(i)[0]);
            
        return classifier.distributionForInstance(i)[0];
        
    }
   
    public wekaClassifier(File filter, double cutoff) throws IOException, Exception
    {
        this(filter);
        cut = cutoff;
    }
    
    //Trained on twitter data
    public wekaClassifier(File filter) throws IOException, Exception
    {
        Vector<String> positive = new Vector<String>();
        Vector<String> negative = new Vector<String>();
        
        File f = filter;
        filtername = filter.toString();
        
        BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
        while(true)
        {
            String text = in.readLine();
            if(text == null)
                break;
            text = text.toUpperCase();
            int value = Integer.parseInt(in.readLine());
            
            if(negative.contains(text)||positive.contains(text))
                continue;
            
            if(value == 0)
                negative.add(text);
            else
                positive.add(text);
          
        }
        
         
        
        FastVector fv = new FastVector(2);
        FastVector types = new FastVector(2);
        types.addElement("flu");
        types.addElement("noflu");
        Attribute text = new Attribute("text", (FastVector) null);
        Attribute value = new Attribute("type", types);
        
        
        fv.addElement(text);
        fv.addElement(value);
        
        Instances dataset = new Instances("value",fv,1);
        
        
        for(String s: positive)
        {
            //System.out.println(s);
            Instance i = new Instance(2);
            i.setDataset(dataset);
            i.setValue(text, s);
            i.setValue(value, "flu");
            dataset.add(i);
        }
        
        
        for(String s: negative)
        {
            //System.out.println(s);
            Instance i = new Instance(2);
            i.setDataset(dataset);
            i.setValue(text, s);
            i.setValue(value, "noflu");
            dataset.add(i);
        }
       
        
       dataset.setClassIndex(dataset.numAttributes() - 1);
       
       //System.out.println(dataset);
        
       FilteredClassifier model = new FilteredClassifier();
       StringToWordVector stwv = new StringToWordVector();
       stwv.setStemmer(new weka.core.stemmers.LovinsStemmer());
       stwv.setLowerCaseTokens(true);
       stwv.setOutputWordCounts(true);
      
      // System.out.println(stwv.getStopwords());;
       
       model.setFilter(stwv);
       
       NaiveBayes nb = new NaiveBayes();
       
       LibSVM svm = new LibSVM();
       BayesNet bn = new BayesNet();
       svm.setDebug(false);
       model.setDebug(false);
       //svm.
       
       model.setClassifier(svm);
       
       model.buildClassifier(dataset);
       
      
       
       // System.out.println(model);
       classifier = model;
    }
    
    double cut = .50;
     weka.classifiers.Classifier classifier;
     public String filtername;
}
