/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tests;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.StringTokenizer;
import weka.classifiers.functions.SMOreg;
import weka.core.*;

/**
 * Follows the methodology of journal.pone.0019467 but with random data instead of tweets
 * @author toddbodnar
 */
public class frequencyModel {
    public static double[][] generateDataRandom(int features)
    {
        
        int weeks = cdc.length;
        double results[][] = new double[weeks][features];
        for(int feature=0;feature<features;feature++)
        {
            double scalex, start;
            
            scalex = (Math.random()-.5)*weeks*2;
            start = Math.random()*weeks;
            
            for(int week=0;week<weeks;week++)
            {
                //results[week][feature] = (Math.sin((week-start)/scalex)+1)/2;
                results[week][feature] = Math.random();
                //results[week][feature] = week;
            }
        }
        
        return results;
    }
    
    
    // generates "random" data, which is a set of sin curves of various wavelengths
    public static double[][] generateDataSin(int features, double noise)
    {
        int weeks = cdc.length;
        double results[][] = new double[weeks][features];
        for(int feature=0;feature<features;feature++)
        {
            double scalex, start;
            
            scalex = (Math.random()-.5)*weeks*2;
            start = Math.random()*weeks;
            
            for(int week=0;week<weeks;week++)
            {
                results[week][feature] = (Math.sin((week-start)/scalex)+1)/2*(1.0+noise*(2*Math.random()-1));
                //results[week][feature] = Math.random();
                //results[week][feature] = week;
            }
        }
        
        double max=0,min=999999;
        
        for(int i=0;i<results.length;i++)
            for(int j=0;j<results[0].length;j++)
            {
                if(max<results[i][j])
                    max = results[i][j];
                
                if(min>results[i][j])
                    min = results[i][j];
            }
        
        
        for(int i=0;i<results.length;i++)
            for(int j=0;j<results[0].length;j++)
            {
                results[i][j]/=max;
            }
        
        System.out.println(min+","+max);
        
        return results;
    }
    
    public static double[][] getDataFrequencies(int features) throws Exception
    {
        
        int weeks = cdc.length;
        double results[][] = new double[weeks][features];
        
        
        for(int i=0;i<weeks;i++)
            for(int j=0;j<features;j++)
                results[i][j]=0;
        
        BufferedReader in = new BufferedReader(new FileReader(new File("keywordFrequencies.csv")));
            int keys = 0;
            String key = in.readLine();
            
        int skip = 275; 
        for(int ct=0;ct<skip;ct++)
            in.readLine();
        
        int day = 0;
        
        String input = in.readLine();
        
        do
        {
            StringTokenizer st = new StringTokenizer(input,",");
            for(int ct=0;ct<features;ct++)
                results[day/7][ct]+=Integer.parseInt(st.nextToken())*100000.0/totals[day]; //multiply by 100000 to make sure the numbers aren't too small!
            
            day++;
            
            input = in.readLine();
        }while(input!=null && day < weeks*7);
        
        
        double max=0,min=999999,mean=0;
        
        for(int i=0;i<results.length;i++)
            for(int j=0;j<results[0].length;j++)
            {
                if(max<results[i][j])
                    max = results[i][j];
                
                if(min>results[i][j])
                    min = results[i][j];
                
                mean+=results[i][j];
            }
        
        for(int i=0;i<results.length;i++)
            for(int j=0;j<results[0].length;j++)
            {
                results[i][j]/=max;
            }
        
        System.out.println(min+","+max+","+mean/results.length/results[0].length);
        
        
        
        
        return results;
    }
    
    // gets the estimate for the specified week using the rest of the weeks for training
    public static double get(int week, double input[][]) throws Exception
    {
        SMOreg classifier = new SMOreg();
        
        FastVector fv = new FastVector(input[0].length+1);
        Attribute text = new Attribute("text", (FastVector) null);
        Attribute features[] = new Attribute[input[0].length];
        for(int i=0;i<features.length;i++)
        {
            features[i] = new Attribute("feature_"+i);
            fv.addElement(features[i]);
        }
        Attribute value = new Attribute("weightedpercent");
        
        
        
        fv.addElement(value);
        
        Instances dataset = new Instances("value",fv,input.length-2);
        
        for(int wk=0;wk<input.length/2;wk++)
        {
            if(wk==week)
                continue;
            
            Instance i = new Instance(input[0].length+1);
            i.setDataset(dataset);
            
            for(int j=0;j<features.length;j++)
                i.setValue(features[j],input[wk][j]);
            
            i.setValue(value, cdc[wk]);
            
            dataset.add(i);
        }
        
        dataset.setClass(value);
        classifier.setFilterType(new SelectedTag(SMOreg.FILTER_NORMALIZE,SMOreg.TAGS_FILTER));
        classifier.setKernel( new weka.classifiers.functions.supportVector.PolyKernel(dataset, 1, 5, true) );
        
        classifier.buildClassifier(dataset);
        
        Instance test = new Instance(input[0].length+1);
        test.setDataset(dataset);
        
        for(int j=0;j<features.length;j++)
                test.setValue(features[j],input[week][j]);
            
        test.setValue(value, cdc[week]);
            
        return classifier.classifyInstance(test);
            
        
    }
    
    public static double get(double input[][],int week, SMOreg classifier) throws Exception
    {
        FastVector fv = new FastVector(input[0].length+1);
        Attribute text = new Attribute("text", (FastVector) null);
        Attribute features[] = new Attribute[input[0].length];
        for(int i=0;i<features.length;i++)
        {
            features[i] = new Attribute("feature_"+i);
            fv.addElement(features[i]);
        }
        Attribute value = new Attribute("weightedpercent");
        
        
        
        fv.addElement(value);
        
        Instances dataset = new Instances("value",fv,input.length-2);
       
        Instance test = new Instance(input[0].length+1);
        test.setDataset(dataset);
        
        for(int j=0;j<features.length;j++)
                test.setValue(features[j],input[week][j]);
            
        test.setValue(value, 0);
            
        return classifier.classifyInstance(test);
    }
    
    public static SMOreg getClassifier(double input[][], int weeks, int skip) throws Exception
    {
        SMOreg classifier = new SMOreg();
        
        FastVector fv = new FastVector(input[0].length+1);
        Attribute text = new Attribute("text", (FastVector) null);
        Attribute features[] = new Attribute[input[0].length];
        for(int i=0;i<features.length;i++)
        {
            features[i] = new Attribute("feature_"+i);
            fv.addElement(features[i]);
        }
        Attribute value = new Attribute("weightedpercent");
        
        
        
        fv.addElement(value);
        
        Instances dataset = new Instances("value",fv,input.length-2);
        
        for(int wk=0;wk<input.length;wk++)
        {
            if(wk>weeks)
                continue;
            
            if(wk == skip)
                continue;
            
            Instance i = new Instance(input[0].length+1);
            i.setDataset(dataset);
            
            for(int j=0;j<features.length;j++)
                i.setValue(features[j],input[wk][j]);
            
            i.setValue(value, cdc[wk]);
            
            dataset.add(i);
        }
        
        dataset.setClass(value);
        classifier.setFilterType(new SelectedTag(SMOreg.FILTER_NORMALIZE,SMOreg.TAGS_FILTER));
        //classifier.setKernel( new weka.classifiers.functions.supportVector.RBFKernel(dataset, 101, .005) );
        
        weka.classifiers.functions.supportVector.PolyKernel poly = new weka.classifiers.functions.supportVector.PolyKernel(dataset,250007,1,false);
        
        poly.setDebug(true);
        
        classifier.setKernel( poly );
        
        classifier.setDebug(true);
        
        
        //System.out.println("Building Classifier");
        
        
        classifier.buildClassifier(dataset);
        
        return classifier;
    }
    
    public static double project(double inputvector[][]) throws Exception
    {
        return project(inputvector,-1);
    }
    
    public static double project(double inputvector[][], int skip) throws Exception
    {
        //double[][] inputvector = generateData(cdc.length,vectorsize);
        //System.out.println("Input:");
        for(int week=0;week<cdc.length;week++)
        {
         //   for(int feature=0;feature<inputvector[0].length;feature++)
           //     System.out.print(inputvector[week][feature]+",");
            
            //System.out.println();
        }
        
        //System.out.println("\n\n\n");
        SMOreg classifier = getClassifier(inputvector, 20, skip);
        
        double error = 0;
        for(int week=0;week<cdc.length;week++)
        {
            double val = get(inputvector,week,classifier);
            System.out.println(cdc[week]+","+val);
            error+= Math.abs(cdc[week]-val);
        }
        
        //System.out.println("\n\n\n Average Error: "+error/cdc.length);
        //System.out.println(error/cdc.length);
        return error/cdc.length;
    }
    
    public static void updateweekly(double inputvector[][]) throws Exception
    {
        for(int week=2;week<cdc.length;week++)
        {
            SMOreg classifier = getClassifier(inputvector,week-1,-1);
            
            System.out.println(cdc[week]+","+get(inputvector,week,classifier));
        }
    }
    
    public static void main (String args[]) throws Exception
    {
        updateweekly(getDataFrequencies(27000));
        //work(generateDataRandom(27000));
    }
    
    // from: http://www.cdc.gov/flu/weekly/weeklyarchives2011-2012/data/senAllregt18.htm
    static double cdc[] = {1.135,1.174,1.266,1.277,1.419,1.391,1.446,1.555,1.319,1.471,1.647,1.844,2.132,1.753,1.553,1.636,1.760,1.953,1.917,2.128,2.249,2.240,2.205,2.436,1.977,1.863,1.696,1.546,1.392,1.319,1.394};
    
    static final int totals[] = {881766,914740,906950,859007,768081,764855,819715,882353,919832,854002,898799,855957,851509,915486,927684,926805,946726,907809,849483,861142,961402,947508,938582,951662,971634,927704,883103,940490,909808,935392,993001,978062,942046,957810,1101146,1025499,1009700,1030416,996701,990366,959864,1073574,1024826,1029687,1086685,1039224,968064,982153,1122044,1083717,1087653,1136750,1101422,1023706,1124478,1175111,1158810,1155257,1092410,1126613,1047696,1068052,1209785,1170273,1150632,1137297,1147185,1064224,1084308,1168601,1127441,1119536,1052928,1106918,1025385,1016064,1115118,1115438,1120184,1172142,1175698,1130175,1132018,1046127,1021260,1189583,1219983,1267615,1269934,1171028,1208996,1314223,1273850,1008857,1231688,1171226,1200080,1299170,1290390,1191107,1197243,1191422,1158488,821247,1080562,1306722,1275007,1278192,1255265,1170184,1225134,1317433,1295366,1271657,1276185,1241247,1169752,1154803,1287637,1254166,1249972,1234250,1216757,1160697,1187844,1467245,1229217,1269675,1296313,1242351,1185705,1233009,1493596,1268553,1208483,1263427,1283061,1231871,1263373,1321571,1396733,1368005,1343087,1323734,1249213,1265238,1407247,1341161,1303046,1361250,1348270,1262402,1264425,1388029,1308016,1279422,1290083,1282037,1245031,1110162,1300728,1291238,1344342,1335772,1328165,1289976,1262126,1338399,1343864,1324487,1272976,1336831,1274348,1276874,1381901,1337874,1315928,1354265,1323470,1301182,1295592,619386,1050592,1301781,1298281,1283210,1273568,1254831,1290746,1307827,1333965,1326611,1326644,1268211,1232651,1334228,1290625,1280305,1287397,1254261,1185553,1190595,1307544,1282554,1288171,1307643,1284836,1168868,1168521,1249041,1261459,1140217,1208639,1222730,1159987,1159450,1277961,1188222,1206347,1282989,1253389,1208969,1151181,1206443,1235347,1239341,1241314,1226318,1163150,1177862,1290026,1266566,1251633,1276194,1238785,1233598,1209897,1241319,1332411};

}
